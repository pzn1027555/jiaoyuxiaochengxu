<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.education.admin.modules.teacher.mapper.TeacherNotificationMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.education.admin.modules.teacher.entity.TeacherNotification">
        <id column="id" property="id" />
        <result column="teacher_id" property="teacherId" />
        <result column="type" property="type" />
        <result column="title" property="title" />
        <result column="content" property="content" />
        <result column="certification_id" property="certificationId" />
        <result column="interview_time" property="interviewTime" />
        <result column="teacher_level" property="teacherLevel" />
        <result column="is_read" property="isRead" />
        <result column="read_time" property="readTime" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, teacher_id, type, title, content, certification_id, interview_time, 
        teacher_level, is_read, read_time, create_time, update_time
    </sql>

    <!-- 插入通知 -->
    <insert id="insertNotification" parameterType="com.education.admin.modules.teacher.entity.TeacherNotification">
        <selectKey keyProperty="id" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO teacher_notification (
            teacher_id, type, title, content, certification_id, 
            interview_time, teacher_level, is_read, create_time, update_time
        ) VALUES (
            #{teacherId}, #{type}, #{title}, #{content}, #{certificationId},
            #{interviewTime}, #{teacherLevel}, #{isRead}, #{createTime}, #{updateTime}
        )
    </insert>

    <!-- 根据教师ID查询通知列表 -->
    <select id="selectByTeacherId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM teacher_notification
        WHERE teacher_id = #{teacherId}
        ORDER BY create_time DESC
    </select>

    <!-- 根据教师ID查询未读通知数量 -->
    <select id="countUnreadByTeacherId" resultType="int">
        SELECT COUNT(*)
        FROM teacher_notification
        WHERE teacher_id = #{teacherId} AND is_read = 0
    </select>

    <!-- 标记通知为已读 -->
    <update id="markAsRead">
        UPDATE teacher_notification 
        SET is_read = 1, read_time = NOW(), update_time = NOW()
        WHERE id = #{id} AND teacher_id = #{teacherId}
    </update>

    <!-- 批量标记通知为已读 -->
    <update id="markAllAsRead">
        UPDATE teacher_notification 
        SET is_read = 1, read_time = NOW(), update_time = NOW()
        WHERE teacher_id = #{teacherId} AND is_read = 0
    </update>

    <!-- 根据ID查询通知详情 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM teacher_notification
        WHERE id = #{id}
    </select>

    <!-- 删除通知 -->
    <delete id="deleteById">
        DELETE FROM teacher_notification WHERE id = #{id}
    </delete>

</mapper>
