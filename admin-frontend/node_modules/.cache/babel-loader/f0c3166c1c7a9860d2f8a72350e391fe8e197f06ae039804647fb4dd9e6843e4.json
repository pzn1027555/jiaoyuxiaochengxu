{"ast":null,"code":"export default {\n  name: 'CourseCategories',\n  data() {\n    return {\n      loading: false,\n      saving: false,\n      treeData: [],\n      filteredTreeData: [],\n      searchKeyword: '',\n      expandedKeys: [],\n      // 对话框控制\n      showCategoryDialog: false,\n      showMoveDialog: false,\n      isEditMode: false,\n      // 表单数据\n      categoryForm: {\n        id: null,\n        categoryName: '',\n        parentId: 0,\n        icon: '',\n        sortOrder: 1,\n        description: '',\n        status: 1\n      },\n      moveForm: {\n        newSortOrder: 1\n      },\n      currentCategory: {},\n      // 验证规则\n      categoryRules: {\n        categoryName: [{\n          required: true,\n          message: '请输入分类名称',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 50,\n          message: '长度在 2 到 50 个字符',\n          trigger: 'blur'\n        }]\n      },\n      // 课程数量缓存\n      courseCounts: {}\n    };\n  },\n  computed: {\n    dialogTitle() {\n      return this.isEditMode ? '编辑分类' : '新增分类';\n    },\n    parentCategories() {\n      // 返回一级分类，用于选择父分类\n      return this.treeData.filter(item => item.level === 1);\n    },\n    maxSortOrder() {\n      if (!this.currentCategory.parentId) {\n        return this.treeData.filter(item => item.parentId === 0).length;\n      }\n      const parent = this.findCategoryById(this.currentCategory.parentId);\n      return parent && parent.children ? parent.children.length : 1;\n    }\n  },\n  mounted() {\n    this.loadCategories();\n  },\n  methods: {\n    // 加载分类数据\n    async loadCategories() {\n      this.loading = true;\n      try {\n        const response = await this.$api.category.getCategoryTree();\n        if (response.code === 200) {\n          this.treeData = response.data;\n          this.filteredTreeData = [...this.treeData];\n          await this.loadCourseCounts();\n        }\n      } catch (error) {\n        this.$message.error('加载分类数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 加载课程数量\n    async loadCourseCounts() {\n      const loadCounts = async categories => {\n        for (const category of categories) {\n          try {\n            const response = await this.$api.category.getCourseCount(category.id);\n            if (response.code === 200) {\n              this.$set(this.courseCounts, category.id, response.data);\n            }\n          } catch (error) {\n            this.$set(this.courseCounts, category.id, 0);\n          }\n          if (category.children && category.children.length > 0) {\n            await loadCounts(category.children);\n          }\n        }\n      };\n      await loadCounts(this.treeData);\n    },\n    // 搜索分类\n    handleSearch() {\n      if (!this.searchKeyword.trim()) {\n        this.filteredTreeData = [...this.treeData];\n        return;\n      }\n      const filterTree = data => {\n        return data.filter(item => {\n          const matchName = item.categoryName.toLowerCase().includes(this.searchKeyword.toLowerCase());\n          const matchDescription = item.description && item.description.toLowerCase().includes(this.searchKeyword.toLowerCase());\n          if (item.children && item.children.length > 0) {\n            item.children = filterTree(item.children);\n            return matchName || matchDescription || item.children.length > 0;\n          }\n          return matchName || matchDescription;\n        });\n      };\n      this.filteredTreeData = filterTree(JSON.parse(JSON.stringify(this.treeData)));\n    },\n    // 展开/收起所有\n    expandAll() {\n      this.$refs.table && this.$refs.table.store.states.expandRows.length > 0 ? this.collapseAll() : this.expandAllRows();\n    },\n    expandAllRows() {\n      const expandRows = data => {\n        data.forEach(row => {\n          this.$refs.table.toggleRowExpansion(row, true);\n          if (row.children && row.children.length > 0) {\n            expandRows(row.children);\n          }\n        });\n      };\n      expandRows(this.filteredTreeData);\n    },\n    collapseAll() {\n      const collapseRows = data => {\n        data.forEach(row => {\n          this.$refs.table.toggleRowExpansion(row, false);\n          if (row.children && row.children.length > 0) {\n            collapseRows(row.children);\n          }\n        });\n      };\n      collapseRows(this.filteredTreeData);\n    },\n    // 刷新树\n    refreshTree() {\n      this.loadCategories();\n    },\n    // 显示创建对话框\n    showCreateDialog() {\n      this.isEditMode = false;\n      this.categoryForm = {\n        id: null,\n        categoryName: '',\n        parentId: 0,\n        icon: '',\n        sortOrder: 1,\n        description: '',\n        status: 1\n      };\n      this.showCategoryDialog = true;\n    },\n    // 处理命令\n    handleCommand(command) {\n      const {\n        action,\n        row\n      } = command;\n      switch (action) {\n        case 'edit':\n          this.editCategory(row);\n          break;\n        case 'addChild':\n          this.addChild(row);\n          break;\n        case 'moveUp':\n          this.moveCategory(row, 'up');\n          break;\n        case 'moveDown':\n          this.moveCategory(row, 'down');\n          break;\n        case 'delete':\n          this.deleteCategory(row);\n          break;\n      }\n    },\n    // 编辑分类\n    editCategory(category) {\n      this.isEditMode = true;\n      this.categoryForm = {\n        ...category\n      };\n      this.showCategoryDialog = true;\n    },\n    // 添加子分类\n    addChild(parentCategory) {\n      this.isEditMode = false;\n      this.categoryForm = {\n        id: null,\n        categoryName: '',\n        parentId: parentCategory.id,\n        icon: '',\n        sortOrder: 1,\n        description: '',\n        status: 1\n      };\n      this.showCategoryDialog = true;\n    },\n    // 移动分类\n    moveCategory(category, direction) {\n      // 简单的上移下移逻辑\n      const siblings = this.getSiblings(category);\n      const currentIndex = siblings.findIndex(item => item.id === category.id);\n      let newSortOrder;\n      if (direction === 'up' && currentIndex > 0) {\n        newSortOrder = siblings[currentIndex - 1].sortOrder;\n      } else if (direction === 'down' && currentIndex < siblings.length - 1) {\n        newSortOrder = siblings[currentIndex + 1].sortOrder;\n      } else {\n        this.$message.warning('无法移动到该位置');\n        return;\n      }\n      this.updateSortOrder(category.id, newSortOrder);\n    },\n    // 删除分类\n    deleteCategory(category) {\n      // 检查是否可以删除\n      if (!this.canDelete(category)) {\n        this.$message.warning('该分类下存在子分类或课程，无法删除');\n        return;\n      }\n      this.$confirm(`确定要删除分类\"${category.categoryName}\"吗？`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const response = await this.$api.category.deleteCategory(category.id);\n          if (response.code === 200) {\n            this.$message.success('删除成功');\n            this.loadCategories();\n          } else {\n            this.$message.error(response.message);\n          }\n        } catch (error) {\n          this.$message.error('删除失败');\n        }\n      });\n    },\n    // 保存分类\n    async saveCategory() {\n      this.$refs.categoryForm.validate(async valid => {\n        if (valid) {\n          this.saving = true;\n          try {\n            const response = this.isEditMode ? await this.$api.category.updateCategory(this.categoryForm.id, this.categoryForm) : await this.$api.category.createCategory(this.categoryForm);\n            if (response.code === 200) {\n              this.$message.success(response.message);\n              this.showCategoryDialog = false;\n              this.loadCategories();\n            } else {\n              this.$message.error(response.message);\n            }\n          } catch (error) {\n            this.$message.error('保存失败');\n          } finally {\n            this.saving = false;\n          }\n        }\n      });\n    },\n    // 状态变更\n    async handleStatusChange(category) {\n      try {\n        const response = await this.$api.category.updateCategoryStatus(category.id, category.status);\n        if (response.code === 200) {\n          this.$message.success('状态更新成功');\n        } else {\n          // 回滚状态\n          category.status = category.status === 1 ? 0 : 1;\n          this.$message.error(response.message);\n        }\n      } catch (error) {\n        // 回滚状态\n        category.status = category.status === 1 ? 0 : 1;\n        this.$message.error('状态更新失败');\n      }\n    },\n    // 更新排序\n    async updateSortOrder(categoryId, newSortOrder) {\n      try {\n        const response = await this.$api.category.updateSortOrder(categoryId, newSortOrder);\n        if (response.code === 200) {\n          this.$message.success('排序更新成功');\n          this.loadCategories();\n        } else {\n          this.$message.error(response.message);\n        }\n      } catch (error) {\n        this.$message.error('排序更新失败');\n      }\n    },\n    // 工具方法\n    canDelete(category) {\n      // 检查是否有子分类\n      if (category.children && category.children.length > 0) {\n        return false;\n      }\n\n      // 检查是否有课程\n      const courseCount = this.getCourseCount(category);\n      return courseCount === 0;\n    },\n    getCourseCount(category) {\n      return this.courseCounts[category.id] || 0;\n    },\n    getSiblings(category) {\n      if (category.parentId === 0) {\n        return this.treeData.filter(item => item.parentId === 0);\n      } else {\n        const parent = this.findCategoryById(category.parentId);\n        return parent ? parent.children || [] : [];\n      }\n    },\n    findCategoryById(id) {\n      const findInTree = (data, targetId) => {\n        for (const item of data) {\n          if (item.id === targetId) {\n            return item;\n          }\n          if (item.children && item.children.length > 0) {\n            const found = findInTree(item.children, targetId);\n            if (found) return found;\n          }\n        }\n        return null;\n      };\n      return findInTree(this.treeData, id);\n    },\n    formatDate(date) {\n      if (!date) return '-';\n      return new Date(date).toLocaleString();\n    },\n    handleRowClick(row) {\n      // 点击行时的处理逻辑\n    }\n  }\n};","map":{"version":3,"names":["name","data","loading","saving","treeData","filteredTreeData","searchKeyword","expandedKeys","showCategoryDialog","showMoveDialog","isEditMode","categoryForm","id","categoryName","parentId","icon","sortOrder","description","status","moveForm","newSortOrder","currentCategory","categoryRules","required","message","trigger","min","max","courseCounts","computed","dialogTitle","parentCategories","filter","item","level","maxSortOrder","length","parent","findCategoryById","children","mounted","loadCategories","methods","response","$api","category","getCategoryTree","code","loadCourseCounts","error","$message","loadCounts","categories","getCourseCount","$set","handleSearch","trim","filterTree","matchName","toLowerCase","includes","matchDescription","JSON","parse","stringify","expandAll","$refs","table","store","states","expandRows","collapseAll","expandAllRows","forEach","row","toggleRowExpansion","collapseRows","refreshTree","showCreateDialog","handleCommand","command","action","editCategory","addChild","moveCategory","deleteCategory","parentCategory","direction","siblings","getSiblings","currentIndex","findIndex","warning","updateSortOrder","canDelete","$confirm","confirmButtonText","cancelButtonText","type","then","success","saveCategory","validate","valid","updateCategory","createCategory","handleStatusChange","updateCategoryStatus","categoryId","courseCount","findInTree","targetId","found","formatDate","date","Date","toLocaleString","handleRowClick"],"sources":["src/views/education/CourseCategories.vue"],"sourcesContent":["<template>\r\n  <div class=\"categories-container\">\r\n    <!-- 页面标题 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-title\">\r\n        <h2><i class=\"el-icon-folder\"></i> 课程分类管理</h2>\r\n        <p>管理课程分类，支持多级分类和拖拽排序</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 工具栏 -->\r\n    <div class=\"toolbar\">\r\n      <div class=\"toolbar-left\">\r\n        <el-button type=\"primary\" @click=\"showCreateDialog\" icon=\"el-icon-plus\">新增分类</el-button>\r\n        <el-button @click=\"expandAll\" icon=\"el-icon-sort\">展开全部</el-button>\r\n        <el-button @click=\"collapseAll\" icon=\"el-icon-rank\">收起全部</el-button>\r\n        <el-button @click=\"refreshTree\" icon=\"el-icon-refresh\">刷新</el-button>\r\n      </div>\r\n      \r\n      <div class=\"toolbar-right\">\r\n        <el-input \r\n          v-model=\"searchKeyword\"\r\n          placeholder=\"搜索分类...\"\r\n          prefix-icon=\"el-icon-search\"\r\n          @input=\"handleSearch\"\r\n          clearable\r\n          style=\"width: 250px;\">\r\n        </el-input>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 分类树形表格 -->\r\n    <div class=\"tree-section\">\r\n      <el-card>\r\n        <el-table\r\n          :data=\"filteredTreeData\"\r\n          v-loading=\"loading\"\r\n          row-key=\"id\"\r\n          :tree-props=\"{children: 'children', hasChildren: 'hasChildren'}\"\r\n          :default-expand-all=\"expandAll\"\r\n          @row-click=\"handleRowClick\"\r\n          stripe>\r\n          \r\n          <el-table-column prop=\"categoryName\" label=\"分类名称\" width=\"300\">\r\n            <template slot-scope=\"scope\">\r\n              <div class=\"category-name\">\r\n                <i v-if=\"scope.row.icon\" :class=\"scope.row.icon\" style=\"margin-right: 8px;\"></i>\r\n                <span>{{ scope.row.categoryName }}</span>\r\n                <el-tag v-if=\"scope.row.level === 1\" type=\"primary\" size=\"mini\" style=\"margin-left: 8px;\">一级</el-tag>\r\n                <el-tag v-else-if=\"scope.row.level === 2\" type=\"success\" size=\"mini\" style=\"margin-left: 8px;\">二级</el-tag>\r\n              </div>\r\n            </template>\r\n          </el-table-column>\r\n          \r\n          <el-table-column prop=\"description\" label=\"描述\" show-overflow-tooltip>\r\n            <template slot-scope=\"scope\">\r\n              <span>{{ scope.row.description || '-' }}</span>\r\n            </template>\r\n          </el-table-column>\r\n          \r\n          <el-table-column prop=\"sortOrder\" label=\"排序\" width=\"80\" align=\"center\">\r\n            <template slot-scope=\"scope\">\r\n              <span class=\"sort-order\">{{ scope.row.sortOrder }}</span>\r\n            </template>\r\n          </el-table-column>\r\n          \r\n          <el-table-column prop=\"courseCount\" label=\"课程数\" width=\"80\" align=\"center\">\r\n            <template slot-scope=\"scope\">\r\n              <el-badge :value=\"getCourseCount(scope.row)\" class=\"course-badge\">\r\n                <span></span>\r\n              </el-badge>\r\n            </template>\r\n          </el-table-column>\r\n          \r\n          <el-table-column prop=\"status\" label=\"状态\" width=\"80\" align=\"center\">\r\n            <template slot-scope=\"scope\">\r\n              <el-switch\r\n                v-model=\"scope.row.status\"\r\n                :active-value=\"1\"\r\n                :inactive-value=\"0\"\r\n                @change=\"handleStatusChange(scope.row)\">\r\n              </el-switch>\r\n            </template>\r\n          </el-table-column>\r\n          \r\n          <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"150\">\r\n            <template slot-scope=\"scope\">\r\n              {{ formatDate(scope.row.createTime) }}\r\n            </template>\r\n          </el-table-column>\r\n          \r\n          <el-table-column label=\"操作\" width=\"200\" fixed=\"right\">\r\n            <template slot-scope=\"scope\">\r\n              <el-dropdown @command=\"handleCommand\" trigger=\"click\">\r\n                <el-button type=\"primary\" size=\"mini\">\r\n                  操作<i class=\"el-icon-arrow-down el-icon--right\"></i>\r\n                </el-button>\r\n                <el-dropdown-menu slot=\"dropdown\">\r\n                  <el-dropdown-item :command=\"{action: 'edit', row: scope.row}\">\r\n                    <i class=\"el-icon-edit\"></i> 编辑\r\n                  </el-dropdown-item>\r\n                  <el-dropdown-item :command=\"{action: 'addChild', row: scope.row}\" v-if=\"scope.row.level < 2\">\r\n                    <i class=\"el-icon-plus\"></i> 添加子分类\r\n                  </el-dropdown-item>\r\n                  <el-dropdown-item :command=\"{action: 'moveUp', row: scope.row}\">\r\n                    <i class=\"el-icon-top\"></i> 上移\r\n                  </el-dropdown-item>\r\n                  <el-dropdown-item :command=\"{action: 'moveDown', row: scope.row}\">\r\n                    <i class=\"el-icon-bottom\"></i> 下移\r\n                  </el-dropdown-item>\r\n                  <el-dropdown-item :command=\"{action: 'delete', row: scope.row}\" divided v-if=\"canDelete(scope.row)\">\r\n                    <i class=\"el-icon-delete\"></i> 删除\r\n                  </el-dropdown-item>\r\n                </el-dropdown-menu>\r\n              </el-dropdown>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-card>\r\n    </div>\r\n\r\n    <!-- 创建/编辑分类对话框 -->\r\n    <el-dialog \r\n      :title=\"dialogTitle\" \r\n      :visible.sync=\"showCategoryDialog\" \r\n      width=\"600px\"\r\n      :close-on-click-modal=\"false\">\r\n      \r\n      <el-form \r\n        :model=\"categoryForm\" \r\n        :rules=\"categoryRules\" \r\n        ref=\"categoryForm\" \r\n        label-width=\"100px\">\r\n        \r\n        <el-form-item label=\"父分类\" v-if=\"!isEditMode\">\r\n          <el-select v-model=\"categoryForm.parentId\" placeholder=\"选择父分类（不选为一级分类）\" clearable>\r\n            <el-option label=\"无（一级分类）\" :value=\"0\"></el-option>\r\n            <el-option \r\n              v-for=\"category in parentCategories\" \r\n              :key=\"category.id\" \r\n              :label=\"category.categoryName\" \r\n              :value=\"category.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"分类名称\" prop=\"categoryName\">\r\n          <el-input \r\n            v-model=\"categoryForm.categoryName\" \r\n            placeholder=\"请输入分类名称\"\r\n            maxlength=\"50\"\r\n            show-word-limit>\r\n          </el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"分类图标\">\r\n          <el-input \r\n            v-model=\"categoryForm.icon\" \r\n            placeholder=\"请输入图标类名，如：el-icon-folder\">\r\n            <template slot=\"prepend\">\r\n              <i v-if=\"categoryForm.icon\" :class=\"categoryForm.icon\"></i>\r\n              <i v-else class=\"el-icon-picture\"></i>\r\n            </template>\r\n          </el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"排序\">\r\n          <el-input-number \r\n            v-model=\"categoryForm.sortOrder\" \r\n            :min=\"0\" \r\n            :max=\"999\"\r\n            placeholder=\"排序值，数字越小越靠前\">\r\n          </el-input-number>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"分类描述\">\r\n          <el-input \r\n            v-model=\"categoryForm.description\" \r\n            type=\"textarea\" \r\n            :rows=\"3\"\r\n            placeholder=\"请输入分类描述\"\r\n            maxlength=\"200\"\r\n            show-word-limit>\r\n          </el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"状态\">\r\n          <el-radio-group v-model=\"categoryForm.status\">\r\n            <el-radio :label=\"1\">启用</el-radio>\r\n            <el-radio :label=\"0\">禁用</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        \r\n      </el-form>\r\n      \r\n      <div slot=\"footer\">\r\n        <el-button @click=\"showCategoryDialog = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveCategory\" :loading=\"saving\">确定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- 移动分类对话框 -->\r\n    <el-dialog \r\n      title=\"移动分类\" \r\n      :visible.sync=\"showMoveDialog\" \r\n      width=\"500px\">\r\n      \r\n      <div class=\"move-content\">\r\n        <p>将分类 <strong>{{ currentCategory.categoryName }}</strong> 移动到：</p>\r\n        \r\n        <el-form :model=\"moveForm\" label-width=\"100px\">\r\n          <el-form-item label=\"目标位置\">\r\n            <el-input-number \r\n              v-model=\"moveForm.newSortOrder\" \r\n              :min=\"1\" \r\n              :max=\"maxSortOrder\"\r\n              placeholder=\"新的排序位置\">\r\n            </el-input-number>\r\n          </el-form-item>\r\n        </el-form>\r\n        \r\n        <div class=\"move-preview\">\r\n          <p>预览：</p>\r\n          <el-tree\r\n            :data=\"getMovePreview()\"\r\n            :props=\"{ children: 'children', label: 'categoryName' }\"\r\n            node-key=\"id\"\r\n            :highlight-current=\"true\">\r\n          </el-tree>\r\n        </div>\r\n      </div>\r\n      \r\n      <div slot=\"footer\">\r\n        <el-button @click=\"showMoveDialog = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"confirmMove\">确认移动</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'CourseCategories',\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      saving: false,\r\n      treeData: [],\r\n      filteredTreeData: [],\r\n      searchKeyword: '',\r\n      expandedKeys: [],\r\n      \r\n      // 对话框控制\r\n      showCategoryDialog: false,\r\n      showMoveDialog: false,\r\n      isEditMode: false,\r\n      \r\n      // 表单数据\r\n      categoryForm: {\r\n        id: null,\r\n        categoryName: '',\r\n        parentId: 0,\r\n        icon: '',\r\n        sortOrder: 1,\r\n        description: '',\r\n        status: 1\r\n      },\r\n      \r\n      moveForm: {\r\n        newSortOrder: 1\r\n      },\r\n      \r\n      currentCategory: {},\r\n      \r\n      // 验证规则\r\n      categoryRules: {\r\n        categoryName: [\r\n          { required: true, message: '请输入分类名称', trigger: 'blur' },\r\n          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }\r\n        ]\r\n      },\r\n      \r\n      // 课程数量缓存\r\n      courseCounts: {}\r\n    }\r\n  },\r\n  \r\n  computed: {\r\n    dialogTitle() {\r\n      return this.isEditMode ? '编辑分类' : '新增分类'\r\n    },\r\n    \r\n    parentCategories() {\r\n      // 返回一级分类，用于选择父分类\r\n      return this.treeData.filter(item => item.level === 1)\r\n    },\r\n    \r\n    maxSortOrder() {\r\n      if (!this.currentCategory.parentId) {\r\n        return this.treeData.filter(item => item.parentId === 0).length\r\n      }\r\n      const parent = this.findCategoryById(this.currentCategory.parentId)\r\n      return parent && parent.children ? parent.children.length : 1\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    this.loadCategories()\r\n  },\r\n  \r\n  methods: {\r\n    // 加载分类数据\r\n    async loadCategories() {\r\n      this.loading = true\r\n      try {\r\n        const response = await this.$api.category.getCategoryTree()\r\n        if (response.code === 200) {\r\n          this.treeData = response.data\r\n          this.filteredTreeData = [...this.treeData]\r\n          await this.loadCourseCounts()\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('加载分类数据失败')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    \r\n    // 加载课程数量\r\n    async loadCourseCounts() {\r\n      const loadCounts = async (categories) => {\r\n        for (const category of categories) {\r\n          try {\r\n            const response = await this.$api.category.getCourseCount(category.id)\r\n            if (response.code === 200) {\r\n              this.$set(this.courseCounts, category.id, response.data)\r\n            }\r\n          } catch (error) {\r\n            this.$set(this.courseCounts, category.id, 0)\r\n          }\r\n          \r\n          if (category.children && category.children.length > 0) {\r\n            await loadCounts(category.children)\r\n          }\r\n        }\r\n      }\r\n      \r\n      await loadCounts(this.treeData)\r\n    },\r\n    \r\n    // 搜索分类\r\n    handleSearch() {\r\n      if (!this.searchKeyword.trim()) {\r\n        this.filteredTreeData = [...this.treeData]\r\n        return\r\n      }\r\n      \r\n      const filterTree = (data) => {\r\n        return data.filter(item => {\r\n          const matchName = item.categoryName.toLowerCase().includes(this.searchKeyword.toLowerCase())\r\n          const matchDescription = item.description && item.description.toLowerCase().includes(this.searchKeyword.toLowerCase())\r\n          \r\n          if (item.children && item.children.length > 0) {\r\n            item.children = filterTree(item.children)\r\n            return matchName || matchDescription || item.children.length > 0\r\n          }\r\n          \r\n          return matchName || matchDescription\r\n        })\r\n      }\r\n      \r\n      this.filteredTreeData = filterTree(JSON.parse(JSON.stringify(this.treeData)))\r\n    },\r\n    \r\n    // 展开/收起所有\r\n    expandAll() {\r\n      this.$refs.table && this.$refs.table.store.states.expandRows.length > 0 \r\n        ? this.collapseAll() \r\n        : this.expandAllRows()\r\n    },\r\n    \r\n    expandAllRows() {\r\n      const expandRows = (data) => {\r\n        data.forEach(row => {\r\n          this.$refs.table.toggleRowExpansion(row, true)\r\n          if (row.children && row.children.length > 0) {\r\n            expandRows(row.children)\r\n          }\r\n        })\r\n      }\r\n      expandRows(this.filteredTreeData)\r\n    },\r\n    \r\n    collapseAll() {\r\n      const collapseRows = (data) => {\r\n        data.forEach(row => {\r\n          this.$refs.table.toggleRowExpansion(row, false)\r\n          if (row.children && row.children.length > 0) {\r\n            collapseRows(row.children)\r\n          }\r\n        })\r\n      }\r\n      collapseRows(this.filteredTreeData)\r\n    },\r\n    \r\n    // 刷新树\r\n    refreshTree() {\r\n      this.loadCategories()\r\n    },\r\n    \r\n    // 显示创建对话框\r\n    showCreateDialog() {\r\n      this.isEditMode = false\r\n      this.categoryForm = {\r\n        id: null,\r\n        categoryName: '',\r\n        parentId: 0,\r\n        icon: '',\r\n        sortOrder: 1,\r\n        description: '',\r\n        status: 1\r\n      }\r\n      this.showCategoryDialog = true\r\n    },\r\n    \r\n    // 处理命令\r\n    handleCommand(command) {\r\n      const { action, row } = command\r\n      \r\n      switch (action) {\r\n        case 'edit':\r\n          this.editCategory(row)\r\n          break\r\n        case 'addChild':\r\n          this.addChild(row)\r\n          break\r\n        case 'moveUp':\r\n          this.moveCategory(row, 'up')\r\n          break\r\n        case 'moveDown':\r\n          this.moveCategory(row, 'down')\r\n          break\r\n        case 'delete':\r\n          this.deleteCategory(row)\r\n          break\r\n      }\r\n    },\r\n    \r\n    // 编辑分类\r\n    editCategory(category) {\r\n      this.isEditMode = true\r\n      this.categoryForm = { ...category }\r\n      this.showCategoryDialog = true\r\n    },\r\n    \r\n    // 添加子分类\r\n    addChild(parentCategory) {\r\n      this.isEditMode = false\r\n      this.categoryForm = {\r\n        id: null,\r\n        categoryName: '',\r\n        parentId: parentCategory.id,\r\n        icon: '',\r\n        sortOrder: 1,\r\n        description: '',\r\n        status: 1\r\n      }\r\n      this.showCategoryDialog = true\r\n    },\r\n    \r\n    // 移动分类\r\n    moveCategory(category, direction) {\r\n      // 简单的上移下移逻辑\r\n      const siblings = this.getSiblings(category)\r\n      const currentIndex = siblings.findIndex(item => item.id === category.id)\r\n      \r\n      let newSortOrder\r\n      if (direction === 'up' && currentIndex > 0) {\r\n        newSortOrder = siblings[currentIndex - 1].sortOrder\r\n      } else if (direction === 'down' && currentIndex < siblings.length - 1) {\r\n        newSortOrder = siblings[currentIndex + 1].sortOrder\r\n      } else {\r\n        this.$message.warning('无法移动到该位置')\r\n        return\r\n      }\r\n      \r\n      this.updateSortOrder(category.id, newSortOrder)\r\n    },\r\n    \r\n    // 删除分类\r\n    deleteCategory(category) {\r\n      // 检查是否可以删除\r\n      if (!this.canDelete(category)) {\r\n        this.$message.warning('该分类下存在子分类或课程，无法删除')\r\n        return\r\n      }\r\n      \r\n      this.$confirm(`确定要删除分类\"${category.categoryName}\"吗？`, '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(async () => {\r\n        try {\r\n          const response = await this.$api.category.deleteCategory(category.id)\r\n          if (response.code === 200) {\r\n            this.$message.success('删除成功')\r\n            this.loadCategories()\r\n          } else {\r\n            this.$message.error(response.message)\r\n          }\r\n        } catch (error) {\r\n          this.$message.error('删除失败')\r\n        }\r\n      })\r\n    },\r\n    \r\n    // 保存分类\r\n    async saveCategory() {\r\n      this.$refs.categoryForm.validate(async (valid) => {\r\n        if (valid) {\r\n          this.saving = true\r\n          try {\r\n            const response = this.isEditMode \r\n              ? await this.$api.category.updateCategory(this.categoryForm.id, this.categoryForm)\r\n              : await this.$api.category.createCategory(this.categoryForm)\r\n            \r\n            if (response.code === 200) {\r\n              this.$message.success(response.message)\r\n              this.showCategoryDialog = false\r\n              this.loadCategories()\r\n            } else {\r\n              this.$message.error(response.message)\r\n            }\r\n          } catch (error) {\r\n            this.$message.error('保存失败')\r\n          } finally {\r\n            this.saving = false\r\n          }\r\n        }\r\n      })\r\n    },\r\n    \r\n    // 状态变更\r\n    async handleStatusChange(category) {\r\n      try {\r\n        const response = await this.$api.category.updateCategoryStatus(category.id, category.status)\r\n        if (response.code === 200) {\r\n          this.$message.success('状态更新成功')\r\n        } else {\r\n          // 回滚状态\r\n          category.status = category.status === 1 ? 0 : 1\r\n          this.$message.error(response.message)\r\n        }\r\n      } catch (error) {\r\n        // 回滚状态\r\n        category.status = category.status === 1 ? 0 : 1\r\n        this.$message.error('状态更新失败')\r\n      }\r\n    },\r\n    \r\n    // 更新排序\r\n    async updateSortOrder(categoryId, newSortOrder) {\r\n      try {\r\n        const response = await this.$api.category.updateSortOrder(categoryId, newSortOrder)\r\n        if (response.code === 200) {\r\n          this.$message.success('排序更新成功')\r\n          this.loadCategories()\r\n        } else {\r\n          this.$message.error(response.message)\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('排序更新失败')\r\n      }\r\n    },\r\n    \r\n    // 工具方法\r\n    canDelete(category) {\r\n      // 检查是否有子分类\r\n      if (category.children && category.children.length > 0) {\r\n        return false\r\n      }\r\n      \r\n      // 检查是否有课程\r\n      const courseCount = this.getCourseCount(category)\r\n      return courseCount === 0\r\n    },\r\n    \r\n    getCourseCount(category) {\r\n      return this.courseCounts[category.id] || 0\r\n    },\r\n    \r\n    getSiblings(category) {\r\n      if (category.parentId === 0) {\r\n        return this.treeData.filter(item => item.parentId === 0)\r\n      } else {\r\n        const parent = this.findCategoryById(category.parentId)\r\n        return parent ? parent.children || [] : []\r\n      }\r\n    },\r\n    \r\n    findCategoryById(id) {\r\n      const findInTree = (data, targetId) => {\r\n        for (const item of data) {\r\n          if (item.id === targetId) {\r\n            return item\r\n          }\r\n          if (item.children && item.children.length > 0) {\r\n            const found = findInTree(item.children, targetId)\r\n            if (found) return found\r\n          }\r\n        }\r\n        return null\r\n      }\r\n      \r\n      return findInTree(this.treeData, id)\r\n    },\r\n    \r\n    formatDate(date) {\r\n      if (!date) return '-'\r\n      return new Date(date).toLocaleString()\r\n    },\r\n    \r\n    handleRowClick(row) {\r\n      // 点击行时的处理逻辑\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.categories-container {\r\n  padding: 20px;\r\n  background: #f0f2f5;\r\n  min-height: 100vh;\r\n}\r\n\r\n.page-header {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.header-title h2 {\r\n  margin: 0;\r\n  color: #2c5aa0;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.header-title p {\r\n  margin: 5px 0 0 0;\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.toolbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  padding: 15px;\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.tree-section {\r\n  background: white;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.category-name {\r\n  display: flex;\r\n  align-items: center;\r\n  font-weight: 500;\r\n}\r\n\r\n.sort-order {\r\n  font-family: 'Courier New', monospace;\r\n  font-weight: bold;\r\n  color: #2c5aa0;\r\n}\r\n\r\n.course-badge {\r\n  cursor: pointer;\r\n}\r\n\r\n.move-content {\r\n  padding: 10px 0;\r\n}\r\n\r\n.move-preview {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n}\r\n\r\n.move-preview p {\r\n  margin: 0 0 10px 0;\r\n  font-weight: bold;\r\n  color: #666;\r\n}\r\n\r\n/* 树形表格样式优化 */\r\n.el-table ::v-deep .el-table__row {\r\n  cursor: pointer;\r\n}\r\n\r\n.el-table ::v-deep .el-table__row:hover {\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .toolbar {\r\n    flex-direction: column;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .toolbar-left,\r\n  .toolbar-right {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .toolbar-right .el-input {\r\n    width: 100% !important;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}