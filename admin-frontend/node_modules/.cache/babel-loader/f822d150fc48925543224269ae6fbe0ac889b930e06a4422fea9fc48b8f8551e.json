{"ast":null,"code":"import CircleButton from '@/components/CircleButton.vue';\nexport default {\n  name: 'Courses',\n  components: {\n    CircleButton\n  },\n  data() {\n    return {\n      loading: false,\n      courseList: [],\n      selectedCourses: [],\n      currentPage: 1,\n      pageSize: 10,\n      total: 0,\n      // 统计数据\n      overallStats: {},\n      // 搜索表单\n      searchForm: {\n        courseNo: '',\n        title: '',\n        categoryId: null,\n        teacherId: null,\n        difficultyLevel: null,\n        reviewStatus: null,\n        publishStatus: null,\n        isLive: null,\n        isFree: null\n      },\n      // 分类和教师数据\n      categories: [],\n      teachers: [],\n      // 对话框相关\n      showCourseDialog: false,\n      isEdit: false,\n      courseForm: {\n        courseNo: '',\n        title: '',\n        subtitle: '',\n        categoryId: null,\n        teacherId: null,\n        difficultyLevel: 1,\n        duration: 0,\n        lessonCount: 0,\n        originalPrice: 0,\n        currentPrice: 0,\n        isFree: false,\n        isLive: false,\n        liveStartTime: null,\n        liveEndTime: null,\n        maxStudents: 0,\n        coverImage: '',\n        videoUrl: '',\n        description: '',\n        objectives: '',\n        requirements: '',\n        tags: ''\n      },\n      // 表单验证规则\n      courseRules: {\n        courseNo: [{\n          required: true,\n          message: '请输入课程编号',\n          trigger: 'blur'\n        }],\n        title: [{\n          required: true,\n          message: '请输入课程标题',\n          trigger: 'blur'\n        }],\n        categoryId: [{\n          required: true,\n          message: '请选择课程分类',\n          trigger: 'change'\n        }],\n        teacherId: [{\n          required: true,\n          message: '请选择授课教师',\n          trigger: 'change'\n        }],\n        difficultyLevel: [{\n          required: true,\n          message: '请选择难度等级',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  computed: {\n    dialogTitle() {\n      return this.isEdit ? '编辑课程' : '新增课程';\n    }\n  },\n  mounted() {\n    this.init();\n  },\n  methods: {\n    // 初始化\n    async init() {\n      await Promise.all([this.loadCourses(), this.loadCategories(), this.loadTeachers(), this.loadOverallStats()]);\n    },\n    // 加载课程列表\n    async loadCourses() {\n      this.loading = true;\n      try {\n        const response = await this.$api.course.getCoursesByPage(this.currentPage, this.pageSize);\n        if (response.code === 200) {\n          this.courseList = response.data.courses;\n          this.total = response.data.total;\n        }\n      } catch (error) {\n        this.$message.error('加载课程列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 加载分类\n    async loadCategories() {\n      try {\n        const response = await this.$api.category.getAllCategories();\n        if (response.code === 200) {\n          this.categories = response.data;\n        }\n      } catch (error) {\n        console.error('加载分类失败:', error);\n      }\n    },\n    // 加载教师\n    async loadTeachers() {\n      try {\n        const response = await this.$api.teacher.getAllTeachers();\n        if (response.code === 200) {\n          this.teachers = response.data;\n        }\n      } catch (error) {\n        console.error('加载教师失败:', error);\n      }\n    },\n    // 加载统计数据\n    async loadOverallStats() {\n      try {\n        const response = await this.$api.course.getOverallStats();\n        if (response.code === 200) {\n          this.overallStats = response.data;\n        }\n      } catch (error) {\n        console.error('加载统计数据失败:', error);\n      }\n    },\n    // 搜索课程\n    async searchCourses() {\n      this.currentPage = 1;\n      await this.loadCoursesByCondition();\n    },\n    // 根据条件加载课程\n    async loadCoursesByCondition() {\n      this.loading = true;\n      try {\n        const response = await this.$api.course.getCoursesByCondition(this.searchForm);\n        if (response.code === 200) {\n          this.courseList = response.data;\n          this.total = response.data.length;\n        }\n      } catch (error) {\n        this.$message.error('搜索失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 重置搜索\n    resetSearch() {\n      this.searchForm = {\n        courseNo: '',\n        title: '',\n        categoryId: null,\n        teacherId: null,\n        difficultyLevel: null,\n        reviewStatus: null,\n        publishStatus: null,\n        isLive: null,\n        isFree: null\n      };\n      this.loadCourses();\n    },\n    // 显示创建对话框\n    showCreateDialog() {\n      this.isEdit = false;\n      this.courseForm = {\n        courseNo: '',\n        title: '',\n        subtitle: '',\n        categoryId: null,\n        teacherId: null,\n        difficultyLevel: 1,\n        duration: 0,\n        lessonCount: 0,\n        originalPrice: 0,\n        currentPrice: 0,\n        isFree: false,\n        isLive: false,\n        liveStartTime: null,\n        liveEndTime: null,\n        maxStudents: 0,\n        coverImage: '',\n        videoUrl: '',\n        description: '',\n        objectives: '',\n        requirements: '',\n        tags: ''\n      };\n      this.showCourseDialog = true;\n    },\n    // 生成课程编号\n    async generateCourseNo() {\n      try {\n        const response = await this.$api.course.generateCourseNo();\n        if (response.code === 200) {\n          this.courseForm.courseNo = response.data;\n        }\n      } catch (error) {\n        this.$message.error('生成课程编号失败');\n      }\n    },\n    // 保存课程\n    async saveCourse() {\n      this.$refs.courseForm.validate(async valid => {\n        if (valid) {\n          try {\n            const response = this.isEdit ? await this.$api.course.updateCourse(this.courseForm.id, this.courseForm) : await this.$api.course.createCourse(this.courseForm);\n            if (response.code === 200) {\n              this.$message.success(response.message);\n              this.showCourseDialog = false;\n              this.loadCourses();\n              this.loadOverallStats();\n            } else {\n              this.$message.error(response.message);\n            }\n          } catch (error) {\n            this.$message.error('保存失败');\n          }\n        }\n      });\n    },\n    // 获取课程操作按钮\n    getCourseActions(course) {\n      const actions = [{\n        icon: 'el-icon-view',\n        type: 'primary',\n        tooltip: '查看详情',\n        action: 'view',\n        data: course\n      }, {\n        icon: 'el-icon-edit',\n        type: 'warning',\n        tooltip: '编辑课程',\n        action: 'edit',\n        data: course\n      }];\n      if (course.reviewStatus === 0) {\n        actions.push({\n          icon: 'el-icon-check',\n          type: 'success',\n          tooltip: '审核课程',\n          action: 'review',\n          data: course\n        });\n      }\n      if (this.canPublish(course)) {\n        actions.push({\n          icon: 'el-icon-upload2',\n          type: 'success',\n          tooltip: '发布课程',\n          action: 'publish',\n          data: course\n        });\n      }\n      if (course.publishStatus === 1) {\n        actions.push({\n          icon: 'el-icon-download',\n          type: 'warning',\n          tooltip: '下架课程',\n          action: 'unpublish',\n          data: course\n        });\n      }\n      if (this.canDelete(course)) {\n        actions.push({\n          icon: 'el-icon-delete',\n          type: 'danger',\n          tooltip: '删除课程',\n          action: 'delete',\n          data: course\n        });\n      }\n      return actions;\n    },\n    // 处理操作按钮点击\n    handleAction(actionData) {\n      const {\n        action,\n        data: course\n      } = actionData;\n      switch (action) {\n        case 'view':\n          this.viewCourse(course);\n          break;\n        case 'edit':\n          this.editCourse(course);\n          break;\n        case 'review':\n          this.reviewCourse(course);\n          break;\n        case 'publish':\n          this.publishCourse(course, 1);\n          break;\n        case 'unpublish':\n          this.publishCourse(course, 2);\n          break;\n        case 'delete':\n          this.deleteCourse(course);\n          break;\n        default:\n          this.$message.info(`${action} 功能开发中...`);\n      }\n    },\n    viewCourse(course) {\n      this.$message.info(`查看课程 \"${course.title}\" 详情`);\n    },\n    reviewCourse(course) {\n      this.$message.info(`审核课程 \"${course.title}\"`);\n    },\n    publishCourse(course, status) {\n      const statusText = status === 1 ? '发布' : '下架';\n      this.$message.info(`${statusText}课程 \"${course.title}\"`);\n    },\n    // 编辑课程\n    editCourse(course) {\n      this.isEdit = true;\n      this.courseForm = {\n        ...course\n      };\n      this.showCourseDialog = true;\n    },\n    // 删除课程\n    deleteCourse(course) {\n      this.$confirm('确定要删除这个课程吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const response = await this.$api.course.deleteCourse(course.id);\n          if (response.code === 200) {\n            this.$message.success('删除成功');\n            this.loadCourses();\n            this.loadOverallStats();\n          } else {\n            this.$message.error(response.message);\n          }\n        } catch (error) {\n          this.$message.error('删除失败');\n        }\n      });\n    },\n    // 工具方法\n    getDifficultyText(level) {\n      const texts = {\n        1: '初级',\n        2: '中级',\n        3: '高级'\n      };\n      return texts[level] || '未知';\n    },\n    getReviewStatusText(status) {\n      const texts = {\n        0: '待审核',\n        1: '审核通过',\n        2: '审核拒绝'\n      };\n      return texts[status] || '未知';\n    },\n    getReviewStatusType(status) {\n      const types = {\n        0: 'warning',\n        1: 'success',\n        2: 'danger'\n      };\n      return types[status] || 'info';\n    },\n    getPublishStatusText(status) {\n      const texts = {\n        0: '未发布',\n        1: '已发布',\n        2: '已下架'\n      };\n      return texts[status] || '未知';\n    },\n    getPublishStatusType(status) {\n      const types = {\n        0: 'info',\n        1: 'success',\n        2: 'warning'\n      };\n      return types[status] || 'info';\n    },\n    canPublish(course) {\n      return course.reviewStatus === 1 && course.publishStatus === 0;\n    },\n    canDelete(course) {\n      return course.publishStatus !== 1 && (course.currentStudents || 0) === 0;\n    },\n    formatDate(date) {\n      if (!date) return '-';\n      return new Date(date).toLocaleString();\n    },\n    // 分页相关\n    handleSizeChange(val) {\n      this.pageSize = val;\n      this.currentPage = 1;\n      this.loadCourses();\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n      this.loadCourses();\n    },\n    // 选择相关\n    handleSelectionChange(selection) {\n      this.selectedCourses = selection;\n    },\n    // 刷新数据\n    refreshData() {\n      this.init();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}