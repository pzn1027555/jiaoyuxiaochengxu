{"ast":null,"code":"export default {\n  name: 'TabsContainer',\n  props: {\n    // 动态标签页数组\n    tabs: {\n      type: Array,\n      default: () => []\n    },\n    // 当前激活的标签\n    value: {\n      type: String,\n      default: 'dashboard'\n    },\n    // 是否显示添加标签按钮\n    showAddButton: {\n      type: Boolean,\n      default: false\n    },\n    // 最大标签数量\n    maxTabs: {\n      type: Number,\n      default: 10\n    }\n  },\n  data() {\n    return {\n      activeTab: this.value || 'dashboard',\n      // 动态标签页（不包括固定的首页标签）\n      dynamicTabs: [...this.tabs]\n    };\n  },\n  watch: {\n    value(newVal) {\n      this.activeTab = newVal;\n    },\n    tabs: {\n      handler(newTabs) {\n        this.dynamicTabs = [...newTabs];\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  methods: {\n    // 处理标签点击\n    handleTabClick(tab) {\n      if (tab.disabled) return;\n      this.activeTab = tab.key;\n      this.$emit('input', tab.key);\n      this.$emit('tab-change', tab);\n\n      // 如果有路径，进行路由跳转\n      if (tab.path && this.$router) {\n        this.$router.push(tab.path);\n      }\n    },\n    // 处理标签关闭\n    handleTabClose(tab, index) {\n      // 触发关闭事件\n      this.$emit('tab-close', tab, index);\n\n      // 从动态标签数组中移除\n      this.dynamicTabs.splice(index, 1);\n\n      // 如果关闭的是当前激活标签，需要切换到其他标签\n      if (this.activeTab === tab.key) {\n        if (this.dynamicTabs.length > 0) {\n          // 优先选择右边的标签，如果没有则选择左边的\n          const nextTab = this.dynamicTabs[index] || this.dynamicTabs[index - 1];\n          if (nextTab) {\n            this.handleTabClick(nextTab);\n          } else {\n            // 如果没有其他动态标签，切换到首页\n            this.handleTabClick({\n              key: 'dashboard',\n              label: '我的课表',\n              path: '/dashboard'\n            });\n          }\n        } else {\n          // 切换到首页\n          this.handleTabClick({\n            key: 'dashboard',\n            label: '我的课表',\n            path: '/dashboard'\n          });\n        }\n      }\n    },\n    // 添加新标签\n    addTab(tab) {\n      // 检查是否已存在相同标签\n      const existingTab = this.dynamicTabs.find(t => t.key === tab.key);\n      if (existingTab) {\n        // 如果已存在，直接激活\n        this.handleTabClick(existingTab);\n        return;\n      }\n\n      // 检查最大标签数量限制\n      if (this.dynamicTabs.length >= this.maxTabs) {\n        this.$message.warning(`最多只能打开${this.maxTabs}个标签页`);\n        return;\n      }\n\n      // 添加新标签并激活\n      this.dynamicTabs.push(tab);\n      this.handleTabClick(tab);\n      this.$emit('tab-add', tab);\n    },\n    // 关闭所有标签（除了首页）\n    closeAllTabs() {\n      this.dynamicTabs = [];\n      this.handleTabClick({\n        key: 'dashboard',\n        label: '我的课表',\n        path: '/dashboard'\n      });\n      this.$emit('close-all');\n    },\n    // 关闭其他标签\n    closeOtherTabs(currentTab) {\n      this.dynamicTabs = this.dynamicTabs.filter(tab => tab.key === currentTab.key);\n      if (!this.dynamicTabs.find(tab => tab.key === this.activeTab) && this.activeTab !== 'dashboard') {\n        this.handleTabClick({\n          key: 'dashboard',\n          label: '我的课表',\n          path: '/dashboard'\n        });\n      }\n      this.$emit('close-others', currentTab);\n    }\n  }\n};","map":{"version":3,"names":["name","props","tabs","type","Array","default","value","String","showAddButton","Boolean","maxTabs","Number","data","activeTab","dynamicTabs","watch","newVal","handler","newTabs","deep","immediate","methods","handleTabClick","tab","disabled","key","$emit","path","$router","push","handleTabClose","index","splice","length","nextTab","label","addTab","existingTab","find","t","$message","warning","closeAllTabs","closeOtherTabs","currentTab","filter"],"sources":["src/components/TabsContainer.vue"],"sourcesContent":["<template>\r\n  <div class=\"tabs-container\">\r\n    <!-- 标签页头部 -->\r\n    <div class=\"tabs-header\">\r\n      <div class=\"tabs-wrapper\">\r\n        <!-- 固定的主页标签 -->\r\n        <div\r\n          :class=\"['tab-item', 'home-tab', { active: activeTab === 'dashboard' }]\"\r\n          @click=\"handleTabClick({ key: 'dashboard', label: '我的课表', path: '/dashboard', closable: false })\"\r\n        >\r\n          <i class=\"el-icon-s-home tab-icon\" />\r\n          <span class=\"tab-label\">我的课表</span>\r\n        </div>\r\n        \r\n        <!-- 动态标签页 -->\r\n        <div\r\n          v-for=\"(tab, index) in dynamicTabs\"\r\n          :key=\"tab.key\"\r\n          :class=\"['tab-item', { active: activeTab === tab.key }]\"\r\n          @click=\"handleTabClick(tab)\"\r\n        >\r\n          <i v-if=\"tab.icon\" :class=\"tab.icon\" class=\"tab-icon\" />\r\n          <span class=\"tab-label\">{{ tab.label }}</span>\r\n          <i\r\n            v-if=\"tab.closable !== false\"\r\n            class=\"el-icon-close tab-close\"\r\n            @click.stop=\"handleTabClose(tab, index)\"\r\n          />\r\n        </div>\r\n        \r\n        <!-- 添加标签按钮 -->\r\n        <div class=\"add-tab-btn\" @click=\"$emit('add-tab')\" v-if=\"showAddButton\">\r\n          <i class=\"el-icon-plus\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 标签页内容 -->\r\n    <div class=\"tab-content\">\r\n      <slot :activeTab=\"activeTab\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TabsContainer',\r\n  props: {\r\n    // 动态标签页数组\r\n    tabs: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    // 当前激活的标签\r\n    value: {\r\n      type: String,\r\n      default: 'dashboard'\r\n    },\r\n    // 是否显示添加标签按钮\r\n    showAddButton: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 最大标签数量\r\n    maxTabs: {\r\n      type: Number,\r\n      default: 10\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      activeTab: this.value || 'dashboard',\r\n      // 动态标签页（不包括固定的首页标签）\r\n      dynamicTabs: [...this.tabs]\r\n    }\r\n  },\r\n  watch: {\r\n    value(newVal) {\r\n      this.activeTab = newVal\r\n    },\r\n    tabs: {\r\n      handler(newTabs) {\r\n        this.dynamicTabs = [...newTabs]\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    }\r\n  },\r\n  methods: {\r\n    // 处理标签点击\r\n    handleTabClick(tab) {\r\n      if (tab.disabled) return\r\n      \r\n      this.activeTab = tab.key\r\n      this.$emit('input', tab.key)\r\n      this.$emit('tab-change', tab)\r\n      \r\n      // 如果有路径，进行路由跳转\r\n      if (tab.path && this.$router) {\r\n        this.$router.push(tab.path)\r\n      }\r\n    },\r\n    \r\n    // 处理标签关闭\r\n    handleTabClose(tab, index) {\r\n      // 触发关闭事件\r\n      this.$emit('tab-close', tab, index)\r\n      \r\n      // 从动态标签数组中移除\r\n      this.dynamicTabs.splice(index, 1)\r\n      \r\n      // 如果关闭的是当前激活标签，需要切换到其他标签\r\n      if (this.activeTab === tab.key) {\r\n        if (this.dynamicTabs.length > 0) {\r\n          // 优先选择右边的标签，如果没有则选择左边的\r\n          const nextTab = this.dynamicTabs[index] || this.dynamicTabs[index - 1]\r\n          if (nextTab) {\r\n            this.handleTabClick(nextTab)\r\n          } else {\r\n            // 如果没有其他动态标签，切换到首页\r\n            this.handleTabClick({ key: 'dashboard', label: '我的课表', path: '/dashboard' })\r\n          }\r\n        } else {\r\n          // 切换到首页\r\n          this.handleTabClick({ key: 'dashboard', label: '我的课表', path: '/dashboard' })\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 添加新标签\r\n    addTab(tab) {\r\n      // 检查是否已存在相同标签\r\n      const existingTab = this.dynamicTabs.find(t => t.key === tab.key)\r\n      if (existingTab) {\r\n        // 如果已存在，直接激活\r\n        this.handleTabClick(existingTab)\r\n        return\r\n      }\r\n      \r\n      // 检查最大标签数量限制\r\n      if (this.dynamicTabs.length >= this.maxTabs) {\r\n        this.$message.warning(`最多只能打开${this.maxTabs}个标签页`)\r\n        return\r\n      }\r\n      \r\n      // 添加新标签并激活\r\n      this.dynamicTabs.push(tab)\r\n      this.handleTabClick(tab)\r\n      this.$emit('tab-add', tab)\r\n    },\r\n    \r\n    // 关闭所有标签（除了首页）\r\n    closeAllTabs() {\r\n      this.dynamicTabs = []\r\n      this.handleTabClick({ key: 'dashboard', label: '我的课表', path: '/dashboard' })\r\n      this.$emit('close-all')\r\n    },\r\n    \r\n    // 关闭其他标签\r\n    closeOtherTabs(currentTab) {\r\n      this.dynamicTabs = this.dynamicTabs.filter(tab => tab.key === currentTab.key)\r\n      if (!this.dynamicTabs.find(tab => tab.key === this.activeTab) && this.activeTab !== 'dashboard') {\r\n        this.handleTabClick({ key: 'dashboard', label: '我的课表', path: '/dashboard' })\r\n      }\r\n      this.$emit('close-others', currentTab)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.tabs-container {\r\n  background: var(--card-background, #ffffff);\r\n  border-radius: 8px;\r\n  border: 1px solid var(--border-lighter, #ebeef5);\r\n  overflow: hidden;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.tabs-header {\r\n  display: flex;\r\n  background: #fafbfc;\r\n  border-bottom: 1px solid var(--border-lighter, #ebeef5);\r\n}\r\n\r\n.tab-item {\r\n  padding: 16px 24px;\r\n  cursor: pointer;\r\n  border-right: 1px solid var(--border-lighter, #ebeef5);\r\n  transition: all 0.3s;\r\n  font-size: 14px;\r\n  color: var(--text-regular, #606266);\r\n  position: relative;\r\n  white-space: nowrap;\r\n}\r\n\r\n.tab-item:last-child {\r\n  border-right: none;\r\n}\r\n\r\n.tab-item:hover {\r\n  background: #f0f9ff;\r\n  color: var(--primary-color, #409eff);\r\n}\r\n\r\n.tab-item.active {\r\n  background: var(--card-background, #ffffff);\r\n  color: var(--primary-color, #409eff);\r\n  font-weight: 500;\r\n}\r\n\r\n.tab-item.active::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 3px;\r\n  background: var(--primary-color, #409eff);\r\n}\r\n\r\n.tab-content {\r\n  padding: 0;\r\n  min-height: 400px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}