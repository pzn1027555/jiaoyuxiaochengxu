{"ast":null,"code":"import Layout from '@/components/Layout.vue';\nexport default {\n  name: 'Dashboard',\n  components: {\n    Layout\n  },\n  data() {\n    return {\n      stats: {\n        userCount: 0,\n        onlineCount: 0,\n        revenue: '0.00',\n        orderCount: 0\n      },\n      systemInfo: {\n        uptime: '0天0小时',\n        cpuUsage: 0,\n        memoryUsage: 0,\n        diskUsage: 0\n      },\n      recentUsers: []\n    };\n  },\n  created() {\n    this.loadDashboardData();\n  },\n  methods: {\n    async loadDashboardData() {\n      try {\n        // 模拟加载数据\n        this.stats = {\n          userCount: 1250,\n          onlineCount: 186,\n          revenue: '25,680.00',\n          orderCount: 2456\n        };\n        this.systemInfo = {\n          uptime: '15天6小时',\n          cpuUsage: 35,\n          memoryUsage: 68,\n          diskUsage: 42\n        };\n\n        // 获取最近用户（模拟数据）\n        this.recentUsers = [{\n          id: 1,\n          username: 'user001',\n          nickname: '张三',\n          email: 'user001@example.com',\n          createTime: '2024-01-15 10:30:00',\n          status: 1\n        }, {\n          id: 2,\n          username: 'user002',\n          nickname: '李四',\n          email: 'user002@example.com',\n          createTime: '2024-01-15 09:15:00',\n          status: 1\n        }, {\n          id: 3,\n          username: 'user003',\n          nickname: '王五',\n          email: 'user003@example.com',\n          createTime: '2024-01-14 16:45:00',\n          status: 0\n        }];\n\n        // 在实际项目中，应该调用真实的API\n        // const userCountRes = await this.$api.user.getUserCount()\n        // this.stats.userCount = userCountRes.data\n      } catch (error) {\n        console.error('加载仪表盘数据失败:', error);\n      }\n    },\n    async testConnection() {\n      try {\n        const response = await this.$api.test.health();\n        this.$message.success('连接测试成功：' + response.message);\n      } catch (error) {\n        this.$message.error('连接测试失败');\n      }\n    },\n    refreshData() {\n      this.loadDashboardData();\n      this.$message.success('数据刷新成功');\n    },\n    exportData() {\n      this.$message.info('导出功能开发中...');\n    }\n  }\n};","map":{"version":3,"names":["Layout","name","components","data","stats","userCount","onlineCount","revenue","orderCount","systemInfo","uptime","cpuUsage","memoryUsage","diskUsage","recentUsers","created","loadDashboardData","methods","id","username","nickname","email","createTime","status","error","console","testConnection","response","$api","test","health","$message","success","message","refreshData","exportData","info"],"sources":["src/views/Dashboard.vue"],"sourcesContent":["<template>\r\n  <Layout>\r\n    <div class=\"dashboard\">\r\n      <h2 class=\"page-title\">仪表盘</h2>\r\n      \r\n      <!-- 统计卡片 -->\r\n      <el-row :gutter=\"20\" class=\"stats-row\">\r\n        <el-col :xs=\"12\" :sm=\"6\" :md=\"6\" :lg=\"6\" :xl=\"6\">\r\n          <div class=\"stat-card\">\r\n            <div class=\"stat-icon user-icon\">\r\n              <i class=\"el-icon-user\" />\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-number\">{{ stats.userCount }}</div>\r\n              <div class=\"stat-label\">用户总数</div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n        \r\n        <el-col :xs=\"12\" :sm=\"6\" :md=\"6\" :lg=\"6\" :xl=\"6\">\r\n          <div class=\"stat-card\">\r\n            <div class=\"stat-icon online-icon\">\r\n              <i class=\"el-icon-connection\" />\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-number\">{{ stats.onlineCount }}</div>\r\n              <div class=\"stat-label\">在线用户</div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n        \r\n        <el-col :xs=\"12\" :sm=\"6\" :md=\"6\" :lg=\"6\" :xl=\"6\">\r\n          <div class=\"stat-card\">\r\n            <div class=\"stat-icon revenue-icon\">\r\n              <i class=\"el-icon-money\" />\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-number\">¥{{ stats.revenue }}</div>\r\n              <div class=\"stat-label\">总收入</div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n        \r\n        <el-col :xs=\"12\" :sm=\"6\" :md=\"6\" :lg=\"6\" :xl=\"6\">\r\n          <div class=\"stat-card\">\r\n            <div class=\"stat-icon order-icon\">\r\n              <i class=\"el-icon-s-order\" />\r\n            </div>\r\n            <div class=\"stat-content\">\r\n              <div class=\"stat-number\">{{ stats.orderCount }}</div>\r\n              <div class=\"stat-label\">订单总数</div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n      \r\n      <!-- 系统状态和快捷操作 -->\r\n      <el-row :gutter=\"20\" class=\"content-row\">\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"12\" :lg=\"12\" :xl=\"12\">\r\n          <div class=\"card\">\r\n            <h3>系统状态</h3>\r\n            <div class=\"system-status\">\r\n              <div class=\"status-item\">\r\n                <span class=\"status-label\">系统运行时间</span>\r\n                <span class=\"status-value\">{{ systemInfo.uptime }}</span>\r\n              </div>\r\n              <div class=\"status-item\">\r\n                <span class=\"status-label\">CPU 使用率</span>\r\n                <span class=\"status-value\">{{ systemInfo.cpuUsage }}%</span>\r\n              </div>\r\n              <div class=\"status-item\">\r\n                <span class=\"status-label\">内存使用率</span>\r\n                <span class=\"status-value\">{{ systemInfo.memoryUsage }}%</span>\r\n              </div>\r\n              <div class=\"status-item\">\r\n                <span class=\"status-label\">磁盘使用率</span>\r\n                <span class=\"status-value\">{{ systemInfo.diskUsage }}%</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n        \r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"12\" :lg=\"12\" :xl=\"12\">\r\n          <div class=\"card\">\r\n            <h3>快捷操作</h3>\r\n            <div class=\"quick-actions\">\r\n              <el-button \r\n                type=\"primary\" \r\n                icon=\"el-icon-plus\" \r\n                @click=\"$router.push('/users')\"\r\n              >\r\n                添加用户\r\n              </el-button>\r\n              <el-button \r\n                type=\"success\" \r\n                icon=\"el-icon-view\" \r\n                @click=\"testConnection\"\r\n              >\r\n                测试连接\r\n              </el-button>\r\n              <el-button \r\n                type=\"warning\" \r\n                icon=\"el-icon-refresh\" \r\n                @click=\"refreshData\"\r\n              >\r\n                刷新数据\r\n              </el-button>\r\n              <el-button \r\n                type=\"info\" \r\n                icon=\"el-icon-download\" \r\n                @click=\"exportData\"\r\n              >\r\n                导出数据\r\n              </el-button>\r\n            </div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n      \r\n      <!-- 最近用户 -->\r\n      <div class=\"card\">\r\n        <h3>最近注册用户</h3>\r\n        <el-table :data=\"recentUsers\" stripe>\r\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\r\n          <el-table-column prop=\"username\" label=\"用户名\" />\r\n          <el-table-column prop=\"nickname\" label=\"昵称\" />\r\n          <el-table-column prop=\"email\" label=\"邮箱\" />\r\n          <el-table-column prop=\"createTime\" label=\"注册时间\" />\r\n          <el-table-column label=\"状态\" width=\"100\">\r\n            <template slot-scope=\"scope\">\r\n              <el-tag :type=\"scope.row.status === 1 ? 'success' : 'danger'\">\r\n                {{ scope.row.status === 1 ? '启用' : '禁用' }}\r\n              </el-tag>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </div>\r\n    </div>\r\n  </Layout>\r\n</template>\r\n\r\n<script>\r\nimport Layout from '@/components/Layout.vue'\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  components: {\r\n    Layout\r\n  },\r\n  data() {\r\n    return {\r\n      stats: {\r\n        userCount: 0,\r\n        onlineCount: 0,\r\n        revenue: '0.00',\r\n        orderCount: 0\r\n      },\r\n      systemInfo: {\r\n        uptime: '0天0小时',\r\n        cpuUsage: 0,\r\n        memoryUsage: 0,\r\n        diskUsage: 0\r\n      },\r\n      recentUsers: []\r\n    }\r\n  },\r\n  created() {\r\n    this.loadDashboardData()\r\n  },\r\n  methods: {\r\n    async loadDashboardData() {\r\n      try {\r\n        // 模拟加载数据\r\n        this.stats = {\r\n          userCount: 1250,\r\n          onlineCount: 186,\r\n          revenue: '25,680.00',\r\n          orderCount: 2456\r\n        }\r\n        \r\n        this.systemInfo = {\r\n          uptime: '15天6小时',\r\n          cpuUsage: 35,\r\n          memoryUsage: 68,\r\n          diskUsage: 42\r\n        }\r\n        \r\n        // 获取最近用户（模拟数据）\r\n        this.recentUsers = [\r\n          {\r\n            id: 1,\r\n            username: 'user001',\r\n            nickname: '张三',\r\n            email: 'user001@example.com',\r\n            createTime: '2024-01-15 10:30:00',\r\n            status: 1\r\n          },\r\n          {\r\n            id: 2,\r\n            username: 'user002',\r\n            nickname: '李四',\r\n            email: 'user002@example.com',\r\n            createTime: '2024-01-15 09:15:00',\r\n            status: 1\r\n          },\r\n          {\r\n            id: 3,\r\n            username: 'user003',\r\n            nickname: '王五',\r\n            email: 'user003@example.com',\r\n            createTime: '2024-01-14 16:45:00',\r\n            status: 0\r\n          }\r\n        ]\r\n        \r\n        // 在实际项目中，应该调用真实的API\r\n        // const userCountRes = await this.$api.user.getUserCount()\r\n        // this.stats.userCount = userCountRes.data\r\n        \r\n      } catch (error) {\r\n        console.error('加载仪表盘数据失败:', error)\r\n      }\r\n    },\r\n    \r\n    async testConnection() {\r\n      try {\r\n        const response = await this.$api.test.health()\r\n        this.$message.success('连接测试成功：' + response.message)\r\n      } catch (error) {\r\n        this.$message.error('连接测试失败')\r\n      }\r\n    },\r\n    \r\n    refreshData() {\r\n      this.loadDashboardData()\r\n      this.$message.success('数据刷新成功')\r\n    },\r\n    \r\n    exportData() {\r\n      this.$message.info('导出功能开发中...')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.stats-row {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.stat-card {\r\n  background: white;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  align-items: center;\r\n  transition: transform 0.3s;\r\n  height: 100px;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.stat-icon {\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 15px;\r\n  font-size: 24px;\r\n  color: white;\r\n}\r\n\r\n.user-icon {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n}\r\n\r\n.online-icon {\r\n  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\r\n}\r\n\r\n.revenue-icon {\r\n  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\r\n}\r\n\r\n.order-icon {\r\n  background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);\r\n}\r\n\r\n.stat-content {\r\n  flex: 1;\r\n}\r\n\r\n.stat-number {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  color: #303133;\r\n  line-height: 1;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 14px;\r\n  color: #909399;\r\n}\r\n\r\n.content-row {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.system-status {\r\n  margin-top: 15px;\r\n}\r\n\r\n.status-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 10px 0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.status-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.status-label {\r\n  color: #606266;\r\n}\r\n\r\n.status-value {\r\n  color: #303133;\r\n  font-weight: bold;\r\n}\r\n\r\n.quick-actions {\r\n  margin-top: 15px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.quick-actions .el-button {\r\n  margin: 0;\r\n}\r\n\r\n/* 响应式 */\r\n@media (max-width: 768px) {\r\n  .stat-card {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  .quick-actions {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .quick-actions .el-button {\r\n    width: 100%;\r\n  }\r\n}\r\n</style> "],"mappings":"AA8IA,OAAAA,MAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,KAAA;QACAC,SAAA;QACAC,WAAA;QACAC,OAAA;QACAC,UAAA;MACA;MACAC,UAAA;QACAC,MAAA;QACAC,QAAA;QACAC,WAAA;QACAC,SAAA;MACA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,iBAAA;EACA;EACAC,OAAA;IACA,MAAAD,kBAAA;MACA;QACA;QACA,KAAAZ,KAAA;UACAC,SAAA;UACAC,WAAA;UACAC,OAAA;UACAC,UAAA;QACA;QAEA,KAAAC,UAAA;UACAC,MAAA;UACAC,QAAA;UACAC,WAAA;UACAC,SAAA;QACA;;QAEA;QACA,KAAAC,WAAA,IACA;UACAI,EAAA;UACAC,QAAA;UACAC,QAAA;UACAC,KAAA;UACAC,UAAA;UACAC,MAAA;QACA,GACA;UACAL,EAAA;UACAC,QAAA;UACAC,QAAA;UACAC,KAAA;UACAC,UAAA;UACAC,MAAA;QACA,GACA;UACAL,EAAA;UACAC,QAAA;UACAC,QAAA;UACAC,KAAA;UACAC,UAAA;UACAC,MAAA;QACA,EACA;;QAEA;QACA;QACA;MAEA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,eAAAA,KAAA;MACA;IACA;IAEA,MAAAE,eAAA;MACA;QACA,MAAAC,QAAA,cAAAC,IAAA,CAAAC,IAAA,CAAAC,MAAA;QACA,KAAAC,QAAA,CAAAC,OAAA,aAAAL,QAAA,CAAAM,OAAA;MACA,SAAAT,KAAA;QACA,KAAAO,QAAA,CAAAP,KAAA;MACA;IACA;IAEAU,YAAA;MACA,KAAAlB,iBAAA;MACA,KAAAe,QAAA,CAAAC,OAAA;IACA;IAEAG,WAAA;MACA,KAAAJ,QAAA,CAAAK,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}