{"ast":null,"code":"import axios from 'axios';\nimport { Message } from 'element-ui';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 添加token到请求头\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 如果返回的状态码不是200，则显示错误信息\n  if (res.code !== 200) {\n    Message({\n      message: res.message || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 如果是401，跳转到登录页\n    if (res.code === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(new Error(res.message || '请求失败'));\n  } else {\n    return res;\n  }\n}, error => {\n  console.error('API请求错误:', error);\n  let message = '请求失败';\n  if (error.response) {\n    message = error.response.data?.message || `请求失败(${error.response.status})`;\n  } else if (error.request) {\n    message = '网络连接失败';\n  }\n  Message({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\n\n// API接口\nconst userApi = {\n  // 用户登录\n  login(username, password) {\n    return api.post('/user/login', {\n      username,\n      password\n    });\n  },\n  // 获取所有用户\n  getUsers() {\n    return api.get('/user');\n  },\n  // 分页获取用户\n  getUsersByPage(page = 1, size = 10) {\n    return api.get('/user/page', {\n      params: {\n        page,\n        size\n      }\n    });\n  },\n  // 根据ID获取用户\n  getUserById(id) {\n    return api.get(`/user/${id}`);\n  },\n  // 创建用户\n  createUser(user) {\n    return api.post('/user', user);\n  },\n  // 更新用户\n  updateUser(id, user) {\n    return api.put(`/user/${id}`, user);\n  },\n  // 删除用户\n  deleteUser(id) {\n    return api.delete(`/user/${id}`);\n  },\n  // 搜索用户\n  searchUsers(params) {\n    return api.get('/user/search', {\n      params\n    });\n  },\n  // 获取用户总数\n  getUserCount() {\n    return api.get('/user/count');\n  }\n};\nconst testApi = {\n  // 健康检查\n  health() {\n    return api.get('/test/health');\n  },\n  // Hello测试\n  hello() {\n    return api.get('/test/hello');\n  }\n};\n\n// 导入新的API模块\nimport { teacherApi } from './teacher';\nimport { studentApi } from './student';\nimport courseApi from './course';\nimport categoryApi from './category';\nexport default {\n  user: userApi,\n  test: testApi,\n  teacher: teacherApi,\n  student: studentApi,\n  course: courseApi,\n  category: categoryApi\n};\n\n// 单独导出各API模块，便于直接引用\nexport { teacherApi } from './teacher';\nexport { studentApi } from './student';\nexport { default as courseApi } from './course';\nexport { default as categoryApi } from './category';","map":{"version":3,"names":["axios","Message","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","res","data","code","message","type","duration","removeItem","window","location","href","Error","console","status","userApi","login","username","password","post","getUsers","get","getUsersByPage","page","size","params","getUserById","id","createUser","user","updateUser","put","deleteUser","delete","searchUsers","getUserCount","testApi","health","hello","teacherApi","studentApi","courseApi","categoryApi","test","teacher","student","course","category","default"],"sources":["D:/project/教育小程序/admin-frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios'\r\nimport { Message } from 'element-ui'\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  config => {\r\n    // 添加token到请求头\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n    \r\n    // 如果返回的状态码不是200，则显示错误信息\r\n    if (res.code !== 200) {\r\n      Message({\r\n        message: res.message || '请求失败',\r\n        type: 'error',\r\n        duration: 5 * 1000\r\n      })\r\n      \r\n      // 如果是401，跳转到登录页\r\n      if (res.code === 401) {\r\n        localStorage.removeItem('token')\r\n        window.location.href = '/login'\r\n      }\r\n      \r\n      return Promise.reject(new Error(res.message || '请求失败'))\r\n    } else {\r\n      return res\r\n    }\r\n  },\r\n  error => {\r\n    console.error('API请求错误:', error)\r\n    \r\n    let message = '请求失败'\r\n    if (error.response) {\r\n      message = error.response.data?.message || `请求失败(${error.response.status})`\r\n    } else if (error.request) {\r\n      message = '网络连接失败'\r\n    }\r\n    \r\n    Message({\r\n      message: message,\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    \r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// API接口\r\nconst userApi = {\r\n  // 用户登录\r\n  login(username, password) {\r\n    return api.post('/user/login', { username, password })\r\n  },\r\n  \r\n  // 获取所有用户\r\n  getUsers() {\r\n    return api.get('/user')\r\n  },\r\n  \r\n  // 分页获取用户\r\n  getUsersByPage(page = 1, size = 10) {\r\n    return api.get('/user/page', { params: { page, size } })\r\n  },\r\n  \r\n  // 根据ID获取用户\r\n  getUserById(id) {\r\n    return api.get(`/user/${id}`)\r\n  },\r\n  \r\n  // 创建用户\r\n  createUser(user) {\r\n    return api.post('/user', user)\r\n  },\r\n  \r\n  // 更新用户\r\n  updateUser(id, user) {\r\n    return api.put(`/user/${id}`, user)\r\n  },\r\n  \r\n  // 删除用户\r\n  deleteUser(id) {\r\n    return api.delete(`/user/${id}`)\r\n  },\r\n  \r\n  // 搜索用户\r\n  searchUsers(params) {\r\n    return api.get('/user/search', { params })\r\n  },\r\n  \r\n  // 获取用户总数\r\n  getUserCount() {\r\n    return api.get('/user/count')\r\n  }\r\n}\r\n\r\nconst testApi = {\r\n  // 健康检查\r\n  health() {\r\n    return api.get('/test/health')\r\n  },\r\n  \r\n  // Hello测试\r\n  hello() {\r\n    return api.get('/test/hello')\r\n  }\r\n}\r\n\r\n// 导入新的API模块\r\nimport { teacherApi } from './teacher'\r\nimport { studentApi } from './student'\r\nimport courseApi from './course'\r\nimport categoryApi from './category'\r\n\r\nexport default {\r\n  user: userApi,\r\n  test: testApi,\r\n  teacher: teacherApi,\r\n  student: studentApi,\r\n  course: courseApi,\r\n  category: categoryApi\r\n}\r\n\r\n// 单独导出各API模块，便于直接引用\r\nexport { teacherApi } from './teacher'\r\nexport { studentApi } from './student'\r\nexport { default as courseApi } from './course'\r\nexport { default as categoryApi } from './category' "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}