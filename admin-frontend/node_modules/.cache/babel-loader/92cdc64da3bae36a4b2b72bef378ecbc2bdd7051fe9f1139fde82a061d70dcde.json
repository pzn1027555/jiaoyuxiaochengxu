{"ast":null,"code":"export default {\n  name: 'CourseCategories',\n  data() {\n    return {\n      loading: false,\n      saving: false,\n      treeData: [],\n      filteredTreeData: [],\n      searchKeyword: '',\n      expandedKeys: [],\n      // 对话框控制\n      showCategoryDialog: false,\n      showMoveDialog: false,\n      isEditMode: false,\n      // 表单数据\n      categoryForm: {\n        id: null,\n        categoryName: '',\n        parentId: 0,\n        icon: '',\n        sortOrder: 1,\n        description: '',\n        status: 1\n      },\n      moveForm: {\n        newSortOrder: 1\n      },\n      currentCategory: {},\n      // 验证规则\n      categoryRules: {\n        categoryName: [{\n          required: true,\n          message: '请输入分类名称',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 50,\n          message: '长度在 2 到 50 个字符',\n          trigger: 'blur'\n        }]\n      },\n      // 课程数量缓存\n      courseCounts: {}\n    };\n  },\n  computed: {\n    dialogTitle() {\n      return this.isEditMode ? '编辑分类' : '新增分类';\n    },\n    parentCategories() {\n      // 返回一级分类，用于选择父分类\n      return this.treeData.filter(item => item.level === 1);\n    },\n    maxSortOrder() {\n      if (!this.currentCategory.parentId) {\n        return this.treeData.filter(item => item.parentId === 0).length;\n      }\n      const parent = this.findCategoryById(this.currentCategory.parentId);\n      return parent && parent.children ? parent.children.length : 1;\n    }\n  },\n  mounted() {\n    this.loadCategories();\n  },\n  methods: {\n    // 加载分类数据\n    async loadCategories() {\n      this.loading = true;\n      try {\n        const response = await this.$api.category.getCategoryTree();\n        if (response.code === 200) {\n          this.treeData = response.data;\n          this.filteredTreeData = [...this.treeData];\n          await this.loadCourseCounts();\n        }\n      } catch (error) {\n        this.$message.error('加载分类数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 加载课程数量\n    async loadCourseCounts() {\n      const loadCounts = async categories => {\n        for (const category of categories) {\n          try {\n            const response = await this.$api.category.getCourseCount(category.id);\n            if (response.code === 200) {\n              this.$set(this.courseCounts, category.id, response.data);\n            }\n          } catch (error) {\n            this.$set(this.courseCounts, category.id, 0);\n          }\n          if (category.children && category.children.length > 0) {\n            await loadCounts(category.children);\n          }\n        }\n      };\n      await loadCounts(this.treeData);\n    },\n    // 搜索分类\n    handleSearch() {\n      if (!this.searchKeyword.trim()) {\n        this.filteredTreeData = [...this.treeData];\n        return;\n      }\n      const filterTree = data => {\n        return data.filter(item => {\n          const matchName = item.categoryName.toLowerCase().includes(this.searchKeyword.toLowerCase());\n          const matchDescription = item.description && item.description.toLowerCase().includes(this.searchKeyword.toLowerCase());\n          if (item.children && item.children.length > 0) {\n            item.children = filterTree(item.children);\n            return matchName || matchDescription || item.children.length > 0;\n          }\n          return matchName || matchDescription;\n        });\n      };\n      this.filteredTreeData = filterTree(JSON.parse(JSON.stringify(this.treeData)));\n    },\n    // 展开/收起所有\n    expandAll() {\n      this.$refs.table && this.$refs.table.store.states.expandRows.length > 0 ? this.collapseAll() : this.expandAllRows();\n    },\n    expandAllRows() {\n      const expandRows = data => {\n        data.forEach(row => {\n          this.$refs.table.toggleRowExpansion(row, true);\n          if (row.children && row.children.length > 0) {\n            expandRows(row.children);\n          }\n        });\n      };\n      expandRows(this.filteredTreeData);\n    },\n    collapseAll() {\n      const collapseRows = data => {\n        data.forEach(row => {\n          this.$refs.table.toggleRowExpansion(row, false);\n          if (row.children && row.children.length > 0) {\n            collapseRows(row.children);\n          }\n        });\n      };\n      collapseRows(this.filteredTreeData);\n    },\n    // 刷新树\n    refreshTree() {\n      this.loadCategories();\n    },\n    // 显示创建对话框\n    showCreateDialog() {\n      this.isEditMode = false;\n      this.categoryForm = {\n        id: null,\n        categoryName: '',\n        parentId: 0,\n        icon: '',\n        sortOrder: 1,\n        description: '',\n        status: 1\n      };\n      this.showCategoryDialog = true;\n    },\n    // 处理命令\n    handleCommand(command) {\n      const {\n        action,\n        row\n      } = command;\n      switch (action) {\n        case 'edit':\n          this.editCategory(row);\n          break;\n        case 'addChild':\n          this.addChild(row);\n          break;\n        case 'moveUp':\n          this.moveCategory(row, 'up');\n          break;\n        case 'moveDown':\n          this.moveCategory(row, 'down');\n          break;\n        case 'delete':\n          this.deleteCategory(row);\n          break;\n      }\n    },\n    // 编辑分类\n    editCategory(category) {\n      this.isEditMode = true;\n      this.categoryForm = {\n        ...category\n      };\n      this.showCategoryDialog = true;\n    },\n    // 添加子分类\n    addChild(parentCategory) {\n      this.isEditMode = false;\n      this.categoryForm = {\n        id: null,\n        categoryName: '',\n        parentId: parentCategory.id,\n        icon: '',\n        sortOrder: 1,\n        description: '',\n        status: 1\n      };\n      this.showCategoryDialog = true;\n    },\n    // 移动分类\n    moveCategory(category, direction) {\n      // 简单的上移下移逻辑\n      const siblings = this.getSiblings(category);\n      const currentIndex = siblings.findIndex(item => item.id === category.id);\n      let newSortOrder;\n      if (direction === 'up' && currentIndex > 0) {\n        newSortOrder = siblings[currentIndex - 1].sortOrder;\n      } else if (direction === 'down' && currentIndex < siblings.length - 1) {\n        newSortOrder = siblings[currentIndex + 1].sortOrder;\n      } else {\n        this.$message.warning('无法移动到该位置');\n        return;\n      }\n      this.updateSortOrder(category.id, newSortOrder);\n    },\n    // 删除分类\n    deleteCategory(category) {\n      // 检查是否可以删除\n      if (!this.canDelete(category)) {\n        this.$message.warning('该分类下存在子分类或课程，无法删除');\n        return;\n      }\n      this.$confirm(`确定要删除分类\"${category.categoryName}\"吗？`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const response = await this.$api.category.deleteCategory(category.id);\n          if (response.code === 200) {\n            this.$message.success('删除成功');\n            this.loadCategories();\n          } else {\n            this.$message.error(response.message);\n          }\n        } catch (error) {\n          this.$message.error('删除失败');\n        }\n      });\n    },\n    // 保存分类\n    async saveCategory() {\n      this.$refs.categoryForm.validate(async valid => {\n        if (valid) {\n          this.saving = true;\n          try {\n            const response = this.isEditMode ? await this.$api.category.updateCategory(this.categoryForm.id, this.categoryForm) : await this.$api.category.createCategory(this.categoryForm);\n            if (response.code === 200) {\n              this.$message.success(response.message);\n              this.showCategoryDialog = false;\n              this.loadCategories();\n            } else {\n              this.$message.error(response.message);\n            }\n          } catch (error) {\n            this.$message.error('保存失败');\n          } finally {\n            this.saving = false;\n          }\n        }\n      });\n    },\n    // 状态变更\n    async handleStatusChange(category) {\n      try {\n        const response = await this.$api.category.updateCategoryStatus(category.id, category.status);\n        if (response.code === 200) {\n          this.$message.success('状态更新成功');\n        } else {\n          // 回滚状态\n          category.status = category.status === 1 ? 0 : 1;\n          this.$message.error(response.message);\n        }\n      } catch (error) {\n        // 回滚状态\n        category.status = category.status === 1 ? 0 : 1;\n        this.$message.error('状态更新失败');\n      }\n    },\n    // 更新排序\n    async updateSortOrder(categoryId, newSortOrder) {\n      try {\n        const response = await this.$api.category.updateSortOrder(categoryId, newSortOrder);\n        if (response.code === 200) {\n          this.$message.success('排序更新成功');\n          this.loadCategories();\n        } else {\n          this.$message.error(response.message);\n        }\n      } catch (error) {\n        this.$message.error('排序更新失败');\n      }\n    },\n    // 工具方法\n    canDelete(category) {\n      // 检查是否有子分类\n      if (category.children && category.children.length > 0) {\n        return false;\n      }\n\n      // 检查是否有课程\n      const courseCount = this.getCourseCount(category);\n      return courseCount === 0;\n    },\n    getCourseCount(category) {\n      return this.courseCounts[category.id] || 0;\n    },\n    getSiblings(category) {\n      if (category.parentId === 0) {\n        return this.treeData.filter(item => item.parentId === 0);\n      } else {\n        const parent = this.findCategoryById(category.parentId);\n        return parent ? parent.children || [] : [];\n      }\n    },\n    findCategoryById(id) {\n      const findInTree = (data, targetId) => {\n        for (const item of data) {\n          if (item.id === targetId) {\n            return item;\n          }\n          if (item.children && item.children.length > 0) {\n            const found = findInTree(item.children, targetId);\n            if (found) return found;\n          }\n        }\n        return null;\n      };\n      return findInTree(this.treeData, id);\n    },\n    formatDate(date) {\n      if (!date) return '-';\n      return new Date(date).toLocaleString();\n    },\n    handleRowClick(row) {\n      // 点击行时的处理逻辑\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}