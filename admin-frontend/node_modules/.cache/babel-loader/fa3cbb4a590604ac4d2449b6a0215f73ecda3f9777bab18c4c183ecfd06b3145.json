{"ast":null,"code":"import axios from 'axios';\nimport { Message } from 'element-ui';\n\n// 创建axios实例\nconst request = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  // 添加token到请求头\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 如果返回的状态码不是200，则显示错误信息\n  if (res.code !== 200) {\n    Message({\n      message: res.message || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 如果是401，跳转到登录页\n    if (res.code === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(new Error(res.message || '请求失败'));\n  } else {\n    return res;\n  }\n}, error => {\n  console.error('API请求错误:', error);\n  let message = '请求失败';\n  if (error.response) {\n    message = error.response.data?.message || `请求失败(${error.response.status})`;\n  } else if (error.request) {\n    message = '网络连接失败';\n  }\n  Message({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","Message","request","create","baseURL","timeout","headers","interceptors","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","res","data","code","message","type","duration","removeItem","window","location","href","Error","console","status"],"sources":["D:/project/教育小程序/admin-frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { Message } from 'element-ui'\r\n\r\n// 创建axios实例\r\nconst request = axios.create({\r\n  baseURL: 'http://localhost:8080/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\n// 请求拦截器\r\nrequest.interceptors.request.use(\r\n  config => {\r\n    // 添加token到请求头\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nrequest.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n    \r\n    // 如果返回的状态码不是200，则显示错误信息\r\n    if (res.code !== 200) {\r\n      Message({\r\n        message: res.message || '请求失败',\r\n        type: 'error',\r\n        duration: 5 * 1000\r\n      })\r\n      \r\n      // 如果是401，跳转到登录页\r\n      if (res.code === 401) {\r\n        localStorage.removeItem('token')\r\n        window.location.href = '/login'\r\n      }\r\n      \r\n      return Promise.reject(new Error(res.message || '请求失败'))\r\n    } else {\r\n      return res\r\n    }\r\n  },\r\n  error => {\r\n    console.error('API请求错误:', error)\r\n    \r\n    let message = '请求失败'\r\n    if (error.response) {\r\n      message = error.response.data?.message || `请求失败(${error.response.status})`\r\n    } else if (error.request) {\r\n      message = '网络连接失败'\r\n    }\r\n    \r\n    Message({\r\n      message: message,\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    \r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default request "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,YAAY;;AAEpC;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC3BC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,OAAO,CAACK,YAAY,CAACL,OAAO,CAACM,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACH,OAAO,CAACO,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,OAAO,CAACK,YAAY,CAACU,QAAQ,CAACT,GAAG,CAC/BS,QAAQ,IAAI;EACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEzB;EACA,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACpBnB,OAAO,CAAC;MACNoB,OAAO,EAAEH,GAAG,CAACG,OAAO,IAAI,MAAM;MAC9BC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAChB,CAAC,CAAC;;IAEF;IACA,IAAIL,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;MACpBT,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;MAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;IAEA,OAAOZ,OAAO,CAACC,MAAM,CAAC,IAAIY,KAAK,CAACV,GAAG,CAACG,OAAO,IAAI,MAAM,CAAC,CAAC;EACzD,CAAC,MAAM;IACL,OAAOH,GAAG;EACZ;AACF,CAAC,EACDJ,KAAK,IAAI;EACPe,OAAO,CAACf,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;EAEhC,IAAIO,OAAO,GAAG,MAAM;EACpB,IAAIP,KAAK,CAACG,QAAQ,EAAE;IAClBI,OAAO,GAAGP,KAAK,CAACG,QAAQ,CAACE,IAAI,EAAEE,OAAO,IAAI,QAAQP,KAAK,CAACG,QAAQ,CAACa,MAAM,GAAG;EAC5E,CAAC,MAAM,IAAIhB,KAAK,CAACZ,OAAO,EAAE;IACxBmB,OAAO,GAAG,QAAQ;EACpB;EAEApB,OAAO,CAAC;IACNoB,OAAO,EAAEA,OAAO;IAChBC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAChB,CAAC,CAAC;EAEF,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}