{"ast":null,"code":"import request from './request';\n\n/**\r\n * 课程分类相关API\r\n */\nexport default {\n  // ========== 基础CRUD操作 ==========\n\n  /**\r\n   * 创建分类\r\n   */\n  createCategory(data) {\n    return request({\n      url: '/category',\n      method: 'post',\n      data\n    });\n  },\n  /**\r\n   * 删除分类\r\n   */\n  deleteCategory(id) {\n    return request({\n      url: `/category/${id}`,\n      method: 'delete'\n    });\n  },\n  /**\r\n   * 更新分类\r\n   */\n  updateCategory(id, data) {\n    return request({\n      url: `/category/${id}`,\n      method: 'put',\n      data\n    });\n  },\n  /**\r\n   * 根据ID获取分类\r\n   */\n  getCategoryById(id) {\n    return request({\n      url: `/category/${id}`,\n      method: 'get'\n    });\n  },\n  /**\r\n   * 获取所有分类\r\n   */\n  getAllCategories() {\n    return request({\n      url: '/category',\n      method: 'get'\n    });\n  },\n  // ========== 树形结构和层级 ==========\n\n  /**\r\n   * 获取分类树形结构\r\n   */\n  getCategoryTree() {\n    return request({\n      url: '/category/tree',\n      method: 'get'\n    });\n  },\n  /**\r\n   * 根据父分类ID获取子分类\r\n   */\n  getCategoriesByParentId(parentId) {\n    return request({\n      url: `/category/parent/${parentId}`,\n      method: 'get'\n    });\n  },\n  /**\r\n   * 根据等级获取分类\r\n   */\n  getCategoriesByLevel(level) {\n    return request({\n      url: `/category/level/${level}`,\n      method: 'get'\n    });\n  },\n  // ========== 分页和查询 ==========\n\n  /**\r\n   * 分页获取分类\r\n   */\n  getCategoriesByPage(page = 1, size = 10) {\n    return request({\n      url: '/category/page',\n      method: 'get',\n      params: {\n        page,\n        size\n      }\n    });\n  },\n  /**\r\n   * 根据条件查询分类\r\n   */\n  getCategoriesByCondition(categoryName, parentId, level, status) {\n    return request({\n      url: '/category/search',\n      method: 'get',\n      params: {\n        categoryName,\n        parentId,\n        level,\n        status\n      }\n    });\n  },\n  /**\r\n   * 搜索分类\r\n   */\n  searchCategories(keyword) {\n    return request({\n      url: '/category/search/keyword',\n      method: 'get',\n      params: {\n        keyword\n      }\n    });\n  },\n  // ========== 状态管理 ==========\n\n  /**\r\n   * 更新分类状态\r\n   */\n  updateCategoryStatus(id, status) {\n    return request({\n      url: `/category/${id}/status`,\n      method: 'put',\n      params: {\n        status\n      }\n    });\n  },\n  // ========== 排序管理 ==========\n\n  /**\r\n   * 更新排序\r\n   */\n  updateSortOrder(id, sortOrder) {\n    return request({\n      url: `/category/${id}/sort`,\n      method: 'put',\n      params: {\n        sortOrder\n      }\n    });\n  },\n  /**\r\n   * 批量更新排序\r\n   */\n  batchUpdateSortOrder(categories) {\n    return request({\n      url: '/category/batch/sort',\n      method: 'put',\n      data: categories\n    });\n  },\n  /**\r\n   * 移动分类位置\r\n   */\n  moveCategoryPosition(id, newSortOrder) {\n    return request({\n      url: `/category/${id}/move`,\n      method: 'put',\n      params: {\n        newSortOrder\n      }\n    });\n  },\n  /**\r\n   * 获取下一个排序值\r\n   */\n  getNextSortOrder(parentId = 0) {\n    return request({\n      url: '/category/next-sort-order',\n      method: 'get',\n      params: {\n        parentId\n      }\n    });\n  },\n  // ========== 统计和关联 ==========\n\n  /**\r\n   * 获取分类下的课程数量\r\n   */\n  getCourseCount(id) {\n    return request({\n      url: `/category/${id}/course-count`,\n      method: 'get'\n    });\n  },\n  // ========== 批量操作 ==========\n\n  /**\r\n   * 批量删除分类\r\n   */\n  batchDeleteCategories(ids) {\n    return request({\n      url: '/category/batch',\n      method: 'delete',\n      data: ids\n    });\n  },\n  // ========== 验证工具 ==========\n\n  /**\r\n   * 检查分类名称是否存在\r\n   */\n  checkCategoryName(categoryName, parentId = 0) {\n    return request({\n      url: '/category/check-name',\n      method: 'get',\n      params: {\n        categoryName,\n        parentId\n      }\n    });\n  }\n};","map":{"version":3,"names":["request","createCategory","data","url","method","deleteCategory","id","updateCategory","getCategoryById","getAllCategories","getCategoryTree","getCategoriesByParentId","parentId","getCategoriesByLevel","level","getCategoriesByPage","page","size","params","getCategoriesByCondition","categoryName","status","searchCategories","keyword","updateCategoryStatus","updateSortOrder","sortOrder","batchUpdateSortOrder","categories","moveCategoryPosition","newSortOrder","getNextSortOrder","getCourseCount","batchDeleteCategories","ids","checkCategoryName"],"sources":["D:/project/教育小程序/admin-frontend/src/api/category.js"],"sourcesContent":["import request from './request'\r\n\r\n/**\r\n * 课程分类相关API\r\n */\r\nexport default {\r\n  // ========== 基础CRUD操作 ==========\r\n  \r\n  /**\r\n   * 创建分类\r\n   */\r\n  createCategory(data) {\r\n    return request({\r\n      url: '/category',\r\n      method: 'post',\r\n      data\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 删除分类\r\n   */\r\n  deleteCategory(id) {\r\n    return request({\r\n      url: `/category/${id}`,\r\n      method: 'delete'\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 更新分类\r\n   */\r\n  updateCategory(id, data) {\r\n    return request({\r\n      url: `/category/${id}`,\r\n      method: 'put',\r\n      data\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 根据ID获取分类\r\n   */\r\n  getCategoryById(id) {\r\n    return request({\r\n      url: `/category/${id}`,\r\n      method: 'get'\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 获取所有分类\r\n   */\r\n  getAllCategories() {\r\n    return request({\r\n      url: '/category',\r\n      method: 'get'\r\n    })\r\n  },\r\n  \r\n  // ========== 树形结构和层级 ==========\r\n  \r\n  /**\r\n   * 获取分类树形结构\r\n   */\r\n  getCategoryTree() {\r\n    return request({\r\n      url: '/category/tree',\r\n      method: 'get'\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 根据父分类ID获取子分类\r\n   */\r\n  getCategoriesByParentId(parentId) {\r\n    return request({\r\n      url: `/category/parent/${parentId}`,\r\n      method: 'get'\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 根据等级获取分类\r\n   */\r\n  getCategoriesByLevel(level) {\r\n    return request({\r\n      url: `/category/level/${level}`,\r\n      method: 'get'\r\n    })\r\n  },\r\n  \r\n  // ========== 分页和查询 ==========\r\n  \r\n  /**\r\n   * 分页获取分类\r\n   */\r\n  getCategoriesByPage(page = 1, size = 10) {\r\n    return request({\r\n      url: '/category/page',\r\n      method: 'get',\r\n      params: { page, size }\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 根据条件查询分类\r\n   */\r\n  getCategoriesByCondition(categoryName, parentId, level, status) {\r\n    return request({\r\n      url: '/category/search',\r\n      method: 'get',\r\n      params: { categoryName, parentId, level, status }\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 搜索分类\r\n   */\r\n  searchCategories(keyword) {\r\n    return request({\r\n      url: '/category/search/keyword',\r\n      method: 'get',\r\n      params: { keyword }\r\n    })\r\n  },\r\n  \r\n  // ========== 状态管理 ==========\r\n  \r\n  /**\r\n   * 更新分类状态\r\n   */\r\n  updateCategoryStatus(id, status) {\r\n    return request({\r\n      url: `/category/${id}/status`,\r\n      method: 'put',\r\n      params: { status }\r\n    })\r\n  },\r\n  \r\n  // ========== 排序管理 ==========\r\n  \r\n  /**\r\n   * 更新排序\r\n   */\r\n  updateSortOrder(id, sortOrder) {\r\n    return request({\r\n      url: `/category/${id}/sort`,\r\n      method: 'put',\r\n      params: { sortOrder }\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 批量更新排序\r\n   */\r\n  batchUpdateSortOrder(categories) {\r\n    return request({\r\n      url: '/category/batch/sort',\r\n      method: 'put',\r\n      data: categories\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 移动分类位置\r\n   */\r\n  moveCategoryPosition(id, newSortOrder) {\r\n    return request({\r\n      url: `/category/${id}/move`,\r\n      method: 'put',\r\n      params: { newSortOrder }\r\n    })\r\n  },\r\n  \r\n  /**\r\n   * 获取下一个排序值\r\n   */\r\n  getNextSortOrder(parentId = 0) {\r\n    return request({\r\n      url: '/category/next-sort-order',\r\n      method: 'get',\r\n      params: { parentId }\r\n    })\r\n  },\r\n  \r\n  // ========== 统计和关联 ==========\r\n  \r\n  /**\r\n   * 获取分类下的课程数量\r\n   */\r\n  getCourseCount(id) {\r\n    return request({\r\n      url: `/category/${id}/course-count`,\r\n      method: 'get'\r\n    })\r\n  },\r\n  \r\n  // ========== 批量操作 ==========\r\n  \r\n  /**\r\n   * 批量删除分类\r\n   */\r\n  batchDeleteCategories(ids) {\r\n    return request({\r\n      url: '/category/batch',\r\n      method: 'delete',\r\n      data: ids\r\n    })\r\n  },\r\n  \r\n  // ========== 验证工具 ==========\r\n  \r\n  /**\r\n   * 检查分类名称是否存在\r\n   */\r\n  checkCategoryName(categoryName, parentId = 0) {\r\n    return request({\r\n      url: '/category/check-name',\r\n      method: 'get',\r\n      params: { categoryName, parentId }\r\n    })\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}