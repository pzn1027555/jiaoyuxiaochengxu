{"ast":null,"code":"import { studentApi } from '@/api';\nimport CircleButton from '@/components/CircleButton.vue';\nexport default {\n  name: 'Students',\n  components: {\n    CircleButton\n  },\n  data() {\n    return {\n      loading: false,\n      submitting: false,\n      studentList: [],\n      selectedStudents: [],\n      statistics: {},\n      searchForm: {\n        studentNo: '',\n        realName: '',\n        level: null,\n        parentPhone: '',\n        grade: null\n      },\n      pagination: {\n        page: 1,\n        size: 10,\n        total: 0\n      },\n      dialogVisible: false,\n      levelDialogVisible: false,\n      parentDialogVisible: false,\n      progressDialogVisible: false,\n      isEdit: false,\n      currentStudent: {},\n      parentInfo: {},\n      progressInfo: {},\n      studentForm: {\n        studentNo: '',\n        realName: '',\n        grade: '',\n        school: '',\n        parentName: '',\n        parentPhone: '',\n        level: 1,\n        inviteCode: '',\n        provinceCode: '',\n        cityCode: '',\n        areaCode: ''\n      },\n      levelForm: {\n        level: null\n      },\n      formRules: {\n        realName: [{\n          required: true,\n          message: '请输入学生姓名',\n          trigger: 'blur'\n        }],\n        grade: [{\n          required: true,\n          message: '请选择年级',\n          trigger: 'change'\n        }],\n        parentPhone: [{\n          required: true,\n          message: '请输入家长电话',\n          trigger: 'blur'\n        }, {\n          pattern: /^1[3-9]\\d{9}$/,\n          message: '请输入正确的手机号',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: {\n    dialogTitle() {\n      return this.isEdit ? '编辑学生' : '新增学生';\n    }\n  },\n  created() {\n    this.loadStudents();\n    this.loadStatistics();\n  },\n  methods: {\n    async loadStudents() {\n      this.loading = true;\n      try {\n        const params = {\n          page: this.pagination.page,\n          size: this.pagination.size,\n          ...this.searchForm\n        };\n        const response = await studentApi.getStudentsByPage(params);\n        if (response.code === 200) {\n          this.studentList = response.data.students || [];\n          this.pagination.total = response.data.total || 0;\n        }\n      } catch (error) {\n        this.$message.error('加载学生列表失败');\n        console.error(error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async loadStatistics() {\n      try {\n        const response = await studentApi.getStatistics();\n        if (response.code === 200) {\n          this.statistics = response.data || {};\n        }\n      } catch (error) {\n        console.error('加载统计数据失败:', error);\n      }\n    },\n    handleSearch() {\n      this.pagination.page = 1;\n      this.loadStudents();\n    },\n    handleReset() {\n      this.$refs.searchForm.resetFields();\n      this.pagination.page = 1;\n      this.loadStudents();\n    },\n    handleSizeChange(val) {\n      this.pagination.size = val;\n      this.pagination.page = 1;\n      this.loadStudents();\n    },\n    handleCurrentChange(val) {\n      this.pagination.page = val;\n      this.loadStudents();\n    },\n    handleSelectionChange(selection) {\n      this.selectedStudents = selection;\n    },\n    handleCreate() {\n      this.isEdit = false;\n      this.dialogVisible = true;\n      this.generateStudentNo();\n      this.generateInviteCode();\n    },\n    async generateStudentNo() {\n      try {\n        const response = await studentApi.generateStudentNo();\n        if (response.code === 200) {\n          this.studentForm.studentNo = response.data;\n        }\n      } catch (error) {\n        console.error('生成学号失败:', error);\n      }\n    },\n    async generateInviteCode() {\n      try {\n        const response = await studentApi.generateInviteCode();\n        if (response.code === 200) {\n          this.studentForm.inviteCode = response.data;\n        }\n      } catch (error) {\n        console.error('生成邀请码失败:', error);\n      }\n    },\n    handleAction(actionData) {\n      const {\n        action,\n        data\n      } = actionData;\n      switch (action) {\n        case 'view-homework':\n          this.viewHomework(data);\n          break;\n        case 'view-schedule':\n          this.viewSchedule(data);\n          break;\n        case 'view-grades':\n          this.viewGrades(data);\n          break;\n        case 'view-vocabulary':\n          this.viewVocabulary(data);\n          break;\n        default:\n          console.log('未知操作:', action);\n      }\n    },\n    viewHomework(student) {\n      this.$message.info(`查看 ${student.realName || '学生'} 的作业`);\n    },\n    viewSchedule(student) {\n      this.$message.info(`查看 ${student.realName || '学生'} 的课表`);\n    },\n    viewGrades(student) {\n      this.$message.info(`查看 ${student.realName || '学生'} 的成绩记录`);\n    },\n    viewVocabulary(student) {\n      this.$message.info(`查看 ${student.realName || '学生'} 的单词详情`);\n    },\n    handleCommand(command) {\n      switch (command.type) {\n        case 'edit':\n          this.handleEdit(command.data);\n          break;\n        case 'level':\n          this.handleLevelAdjust(command.data);\n          break;\n        case 'parent':\n          this.handleViewParent(command.data);\n          break;\n        case 'progress':\n          this.handleViewProgress(command.data);\n          break;\n        case 'reward':\n          this.handleReward(command.data);\n          break;\n        case 'delete':\n          this.handleDelete(command.data);\n          break;\n      }\n    },\n    handleEdit(student) {\n      this.isEdit = true;\n      this.currentStudent = student;\n      this.studentForm = {\n        ...student\n      };\n      this.dialogVisible = true;\n    },\n    handleLevelAdjust(student) {\n      this.currentStudent = student;\n      this.levelForm.level = student.level;\n      this.levelDialogVisible = true;\n    },\n    async handleViewParent(student) {\n      try {\n        const response = await studentApi.getParentInfo(student.id);\n        if (response.code === 200) {\n          this.parentInfo = response.data || {};\n          this.parentDialogVisible = true;\n        }\n      } catch (error) {\n        this.$message.error('加载家长信息失败');\n      }\n    },\n    async handleViewProgress(student) {\n      try {\n        const response = await studentApi.getLearningProgress(student.id);\n        if (response.code === 200) {\n          this.progressInfo = response.data || {};\n          this.progressDialogVisible = true;\n        }\n      } catch (error) {\n        this.$message.error('加载学习进度失败');\n      }\n    },\n    handleReward(student) {\n      this.$message.info('邀请奖励功能开发中...');\n    },\n    async handleSubmit() {\n      try {\n        await this.$refs.studentForm.validate();\n        this.submitting = true;\n        const response = this.isEdit ? await studentApi.updateStudent(this.currentStudent.id, this.studentForm) : await studentApi.createStudent(this.studentForm);\n        if (response.code === 200) {\n          this.$message.success(this.isEdit ? '更新成功' : '创建成功');\n          this.dialogVisible = false;\n          this.loadStudents();\n          this.loadStatistics();\n        } else {\n          this.$message.error(response.message || '操作失败');\n        }\n      } catch (error) {\n        if (error !== false) {\n          // 不是表单验证错误\n          this.$message.error('操作失败');\n        }\n      } finally {\n        this.submitting = false;\n      }\n    },\n    async handleLevelSubmit() {\n      if (!this.levelForm.level) {\n        this.$message.warning('请选择新等级');\n        return;\n      }\n      this.submitting = true;\n      try {\n        const response = await studentApi.updateLevel(this.currentStudent.id, {\n          level: this.levelForm.level\n        });\n        if (response.code === 200) {\n          this.$message.success('等级调整成功');\n          this.levelDialogVisible = false;\n          this.loadStudents();\n          this.loadStatistics();\n        } else {\n          this.$message.error(response.message || '调整失败');\n        }\n      } catch (error) {\n        this.$message.error('调整失败');\n      } finally {\n        this.submitting = false;\n      }\n    },\n    async handleDelete(student) {\n      try {\n        await this.$confirm('确定要删除该学生吗？', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        const response = await studentApi.deleteStudent(student.id);\n        if (response.code === 200) {\n          this.$message.success('删除成功');\n          this.loadStudents();\n          this.loadStatistics();\n        } else {\n          this.$message.error(response.message || '删除失败');\n        }\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('删除失败');\n        }\n      }\n    },\n    async handleBatchUpgrade() {\n      if (this.selectedStudents.length === 0) {\n        this.$message.warning('请先选择学生');\n        return;\n      }\n      try {\n        await this.$confirm('确定要进行批量等级升级吗？', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        const response = await studentApi.autoUpgradeLevel();\n        if (response.code === 200) {\n          this.$message.success('批量升级成功');\n          this.loadStudents();\n          this.loadStatistics();\n        } else {\n          this.$message.error(response.message || '升级失败');\n        }\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('升级失败');\n        }\n      }\n    },\n    async handleBatchDelete() {\n      if (this.selectedStudents.length === 0) {\n        this.$message.warning('请先选择学生');\n        return;\n      }\n      try {\n        await this.$confirm(`确定要删除选中的 ${this.selectedStudents.length} 个学生吗？`, '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n\n        // 批量删除逻辑\n        for (const student of this.selectedStudents) {\n          await studentApi.deleteStudent(student.id);\n        }\n        this.$message.success('批量删除成功');\n        this.loadStudents();\n        this.loadStatistics();\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('批量删除失败');\n        }\n      }\n    },\n    handleExport() {\n      this.$message.info('导出功能开发中...');\n    },\n    resetForm() {\n      this.$refs.studentForm?.resetFields();\n      this.studentForm = {\n        studentNo: '',\n        realName: '',\n        grade: '',\n        school: '',\n        parentName: '',\n        parentPhone: '',\n        level: 1,\n        inviteCode: '',\n        provinceCode: '',\n        cityCode: '',\n        areaCode: ''\n      };\n      this.currentStudent = {};\n    },\n    getStatusText(status) {\n      const statusMap = {\n        'pending': '暂缓中',\n        'active': '暂缓服务',\n        'completed': '已结课',\n        1: '暂缓中',\n        2: '暂缓服务',\n        3: '已结课'\n      };\n      return statusMap[status] || '暂缓中';\n    },\n    getStatusClass(status) {\n      const classMap = {\n        'pending': 'pending',\n        'active': 'active',\n        'completed': 'default',\n        1: 'pending',\n        2: 'active',\n        3: 'default'\n      };\n      return classMap[status] || 'pending';\n    },\n    getLevelText(level) {\n      const levelMap = {\n        1: '青铜',\n        2: '白银',\n        3: '黄金'\n      };\n      return levelMap[level] || '未知';\n    },\n    getLevelTagType(level) {\n      const typeMap = {\n        1: 'warning',\n        2: 'info',\n        3: 'success'\n      };\n      return typeMap[level] || 'info';\n    },\n    formatTime(time) {\n      if (!time) return '-';\n      return new Date(time).toLocaleDateString();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}